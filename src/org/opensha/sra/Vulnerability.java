package org.opensha.sra;

import java.util.List;

import org.opensha.commons.data.function.ArbitrarilyDiscretizedFunc;
import org.opensha.commons.param.Parameter;
import org.opensha.commons.param.ParameterList;
import org.opensha.sra.asset.AssetType;

/**
 * This class represents a <code>Vulnerability</code> model.
 * A vulnerability relationship gives the pdf of loss as a function of 
 * (scalar) IML. It is associated with one among a predefined set of loss 
 * for a given asset must be associated with the same loss type as the 
 * asset. If the asset is a building, all of the possible vulnerability
 * relationships must give building repair cost normalized by replacement cost. If the asset is contents, all of the possible vulnerability relationships must give content repair normalized by replacement cost. If the asset is people, all of the possible vulnerability relationships must give number of people injured normalized by number of occupants.  If the asset is economic output, all of the possible vulnerability relationships must give number of days of lost use.
 * 
 * @author Peter Powers
 * @version $Id:$
 */
public interface Vulnerability {

	/**
	 * Returns the name of this <code>Vulnerability</code> model.
	 * @return the name of this <code>Vulnerability</code>
	 */
	public String getName();
	
	/**
	 * Returns the list of adjustable parameters associated with this
	 * <code>Vulnerability</code> model. These <code>Parameter</code>s
	 * are implementation specific.
	 * 
	 * @return the list of adjustable <code>Parameter</code>s
	 */
	public ParameterList getParameters();
	
	/**
	 * Sets an adjustable parameter
	 * @param name of the <code>Parameter</code> to set
	 * @param vlaue
	 */
	public void setParameter(String name, Object value);

	/**
	 * Returns a vector of discrete IMLs at which the vulnerability 
	 * relationship is defined. All nonnegative reals (double)
	 */
	public List<Double> getIMLValues();
	
	/**
	 * Returns minimum IML supported by the vulnerability relationship. 
	 * Nonnegative real.
	 * 
	 * @return the minimum IML value
	 */
	public Double getMinIMLVal();
	
	/**
	 * Returns maximum IML supported by the vulnerability relationship. 
	 * Nonnegative real. (Can be infinity.)
	 * 
	 * @return the maximum IML value
	 */
	public Double getMaxIMLVal();
	
	/**
	 * Calculate mean loss (potentially normalized by value exposed) given
	 * an IML. Non-negative real (double).
	 */
	public double getMeanLoss();
	
	
	public double GetLossStdDev();
	public double GetLossAtExceedProb();
	public double GetExceedProb();
	public AssetType GetAssetType();
	public LossType GetLossType();
	public ArbitrarilyDiscretizedFunc GetVulnerabilityFunc();
	public Parameter<String> GetIMT();

	
}

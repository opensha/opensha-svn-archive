**************** SHORT TERM (HIGH PRIORITY): ****************
-------------------------------------------------------------

For OpenSHA:
------------


ProbEqkRupture -  add a clone() method and use this in getRuptureClone(*) methods of ProbEqkSource and ProbEqkForecast objects.

ProbEqkRupture - does this need a TimeSpan field (some of our sources do not have a timespan object, and so will not be capable of setting this)?  Lets take it out for now.

Check changes from PointGR_EqkSource to PointPoissonEqkSource (and remove the former?).

Move PEER_TESTCases dir into the rupForecastImpl directory, and the directory PEER_TestGuiPlots to:

	org/scec/sha/PEER_TestsGroupResults

Change startTime constraint in all PEER test cases to TimeSpan.NONE

Remove WardTest

Look over FractileCurveCalculator (Ned)

Ned - Run a forecast with non-zero mags up to mag 10 to search for numerical breakdowns (e.g., Math.pow(-num, non-integer) ) or search for for Math.pow.

HazardCurveApplet:

	-put parameter editors at the top in the ParameterListEditor 
	 (rather than centered in the vertical direction)

	-epistemic list control panal; only redo hazard calculations if needed

create setMinSourceSiteDistanceControlPanel & implement (default = 250 km, but set at 300 or greater for all PEER tests)


Evaluate:
	
	MapGuiBean  (Nitin does this)

		takes a given XYZ file and uses settings in GMT_SettingsControlPanel to 
		construct and display a map
	
	EqkRupSelectorGuiBean

		First version can simply be a JComboBox hard-wired ruptures or use an ERF and 
		selection of src and rup index

Create the following control panels in the future:

	X_ValuesInCurveControlPanel
	

ProgressBars - enable turning on and off in both HazardMapCalculator add  HazardCurveCalculator; quantify the computation cost of using these (as will as if these are completely commented out).

Ned - Check Cross hairs in log-log plots (e.g., try it in the LogPlotTesterApp).

Give JFreechart heads up on our submission, and ask the how we should do it

Submit our log-log implementation formally to JFreeChart.

Ned - Look at GriddedFaultApplet - plotting symbols (make all circles) and check that horz and vert scaling is correct.

Ned - Check - AttenRelApp (made "Set Axes" button rather than JcomoBox)

Ned - Check HazardCurveCalc - moved initialization of hazFunction y-values to 1 inside the calculator (outside of applet), and moved taking the log of it's x-axis values (for condProbFunc) outside the calculator (inside the applet with an if(IMT = SA or PGA or PGV) statement before).

Ned Check - In applets, put an if statement (if IMT=PGA, SA, or PGV) before taking logs of X-axis values before sending to HazardCurveCalculator (else throw an exception to require hard coding other cases later).

HazardCurveCalc - fix calculation sequence to be consistent with SRL paper.


For the SCEC-ITR CME:
---------------------

Think about porting our stand-alone applications to server mode.

Think about meta data structure for haz map calcs.

Build ScenarioShakeMapApplet (with HazardMapApplet in mind).  Then do this on server side?

Get site params from Vs30 and basin depth translator, and get Vs30 and basin depth for lat/lon.


**************** LONG TERM (LOWER PRIORITY): ****************
-------------------------------------------------------------

Implement getApplicableRegion() and isLocWithinApplicableRegion() methods in implemented ERFs.

Investigate what proper longitude limits are with respect to RelativeLocation, 0 to 360, -180 to 180, -180 to 360, or -360 to 360.

DisaggregationCalculator is similar to HazardCurveCalculator; should the two be combined?

PEER_TestsApplet - In the IMT editor section the loop over independent parameters of the chosen IMT can presently deal only with DoubleDiscreteParameter objects (rather than any parameter type).  Should we generalize this?

PEER_TestsApplet - Ned will go through our implementation of the PEER test cases again (to make sure Ned didn't screw anything up since he last did it).  Perhaps this should wait until we can simultaneously show the true or target value in the plot.  Eventually we'll want to make Junit tests for the PEER test cases.

EvenlyGriddedSurface: 1) make the getNthSubsetSurface() method more efficient, and have the getAveDip() method compute the dip explicitly (in case it's a subset of a listric fault)?

Decide how to handle rake=NaN in each IMR (can rake-NaN in and EarthquakeRupture object?).

Decide on and implement a licensing agreement.

Decide on and implement email groups.

Figure out why applets don't resize with browser window size on Mac OS.

Create an archived email list or discussion board for OpenSHA.

Add 3D visualization to GriddedFaultApplet (need Java3D on Mac OS first)?

Go over exception throwing in entire package to make sure it looks appropriate.

We need to create an object that can write our discretized data to a GMT grd file, which we can then make a map from using our GMT_MapGenerator.  See http://gmt.soest.hawaii.edu/gmt/doc/html/GMT_Docs/node113.html for grd-format info.  GMT uses netCDF routines to read and write these files, so NetCDF for Java (http://www.unidata.ucar.edu/packages/netcdf-java/) will presumably be helpful?


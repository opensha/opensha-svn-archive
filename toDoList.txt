**************** SHORT TERM (HIGH PRIORITY): ****************
-------------------------------------------------------------

For OpenSHA:
------------

Split the HazardCurveGuiBean into the following GuiBeans (so they can be used by our ShakeMap and HazardMap Applets):

	IMR_GuiBean
	IMT_GuiBean
	Site_GuiBean
	ERF_GuiBean

	
	MapGuiBean  (Nitin does this)

		takes a given XYZ file and uses settings in GMT_SettingsControlPanel to 
		construct and display a map

    For the ShakeMap and HazardMap Applets we'll also need the following GuiBeans

	GriddedRegionSitesGuiBean	(bounds on region, grid spacing, and elements for setting site params)

		For 1st version, just list the site parameter for the chosen IMR, 
		and apply the one value to all sites
 
       IMLorProbSelectorGuiBean         (IML@Prom or Prob@IML to plot gui bean)

		select "IML at Prob" of "Prob at IML"
			if "IML at Prob" chosen
				provide DaoubleParameterEditor to set Prob
			else
				provide DaoubleParameterEditor to set IML

     For the ShakeMap Applet we'll also need the following GuiBean
	
	EqkRupSelectorGuiBean

		First version can simply be a JComboBox hard-wired ruptures or use an ERF and 
		selection of src and rup index

Create the following control panels for our Applets (these will be put in a JComboBox in the App; chosing one will either show the panel in the App or present a new window):

	AxisLimitsControlPanel
	DisaggregationControlPanel
	PEER_TestCaseSelectorControlPanel
	GMT_SettingsControlPanel

    In the future we'll add:

	ERF_EpistemicListControlPanel
	X_ValuesInCurveControlPanel
	setMinSourceSiteDistanceControlPanel

Move progress bar in HazardCurveCalculator (and Disagg calculator) to a separate and general class; put in 

	sha/gui/infoTools/calcProgressBar.java

PEER_TestResultsPlotterApplet - get participants to check their curves - Ned will do.

Add getApplicableRegion and isLocWithinApplicableRegion methods to EqkRupForecastAPI.

Move Frankel input files to where the forecast class is.

Create ERF_List and its subclasses ERF_EpistemicList and ERF_AleatoryList, and then the PEER_LogicTreeERF_List

Create an object that will compute fractiles from a list of hazard curves - Ned will provide a detailed description.

Cross hairs don't work for log-log plots in our modification of JFreeChart (e.g., try it in the LogPlotTesterApp).

Mail JFreechart to include our log-log implementation into the official JFreeChart framework.

PEER_TestResultsPlotterApplet - make password protection more secure (if needed)?


For the SCEC-ITR CME:
---------------------



(0.0) Refine Hazard curve data storage so that each dataset resides in its own directory. Deliverable: Run MapGenerationApplet, and produce GMT map from datasets organized in their own directories.

(0.1) Update MappGenerationApplet so that it dynamically determines what dataset directories exists, and it can produce a map from any dataset as soon as one is created. It's ok to make the user re-load the page to see a new dataset. Deliverable: Run MapGeneratorApplet, show the available datasets. Create a new dataset/directory using other apps. Show the MapGeneratorApplet (without modification) can map the new dataset.

(1) Calculate the number of grid points in a map using the Dimensions of the Earthquake Ground-Motion Application in SC. map with 0.05 grid spacing. Deliverable: Email with dimensions, grid spacing, and total grip points.

(2) Create a dummy dataset directory (of hazard curves) with the step (1) number of datapoints. Use a real hazard curve file (for realistic numbers) and duplicate it, changing the file name as needed. Deliverable: Dataset in a datadirectory that the mapGeneratorApplet can process.  NOTE: probably easier to butcher existing code to create a real dataset.

(3) Create 8 PSHA Hazard Maps from the dummy dataset. We have 3 color schemes, create a IMT-lo and Prob-lo map for each color scheme. For one of the color schemes, create a IMT-high and Prob-high version of the maps. Deliverable: 8 PSHA maps showing our 3 color schemes, the ability to select IMT or Prob, and the effect of changing different Prob or IMT levels.

(4) Create Applet to Configure a HazardMap Dataset. This is derivative of the Hazard curve data Applet. The user should specify Lat/Long Boundaries, Spacing, IMT, ERF, IMR, and one site type. Deliverable: Applet that constructs the DataSetDescription.

(5) Implement solver to createDataSet. Deliverable: Set of datafiles created by solver that matches dataset specified by user. Dataset is visible to MapGeneratorApplet.

Think  about meta data structure for haz map calcs.

EvenlyGriddedRectangularGeographicRegion - only create the list if they ask for the a list or an iterator

EvenlyGriddedGeographicRegion - finish

Add comments to classes in scec/data/region

Build ScenarioShakeMapApplet (with HazardMapApplet in mind).  Then do this on server side.

Get site params from Vs30 and basin depth translator, and get Vs30 and basin depth for lat/lon.


**************** LONG TERM (LOWER PRIORITY): ****************
-------------------------------------------------------------

Investigate what proper longitude limits are with respect to RelativeLocation, 0 to 360, -180 to 180, -180 to 360, or -360 to 360.

DisaggregationCalculator is similar to HazardCurveCalculator; should the two be combined?

PEER_TestsApplet - In the IMT editor section the loop over independent parameters of the chosen IMT can presently deal only with DoubleDiscreteParameter objects (rather than any parameter type).  Should we generalize this?

PEER_TestsApplet - Ned will go through our implementation of the PEER test cases again (to make sure Ned didn't screw anything up since he last did it).  Perhaps this should wait until we can simultaneously show the true or target value in the plot.  Eventually we'll want to make Junit tests for the PEER test cases.

Move the Frankel96* data files to a better location (w/ a README or INFO file, or a header with an explanation.

X vs Y scaling still seems to be incorrect in GriddedFaultApplet

EvenlyGriddedSurface: 1) make the getNthSubsetSurface() method more efficient, and have the getAveDip() method compute the dip explicitly (in case it's a subset of a listric fault)?

Decide how to handle rake=NaN in each IMR (can rake-NaN in and EarthquakeRupture object?).

Decide on and implement a licensing agreement.

Figure out why applets don't resize with browser window size on Mac OS.

Create an archived email list or discussion board for OpenSHA.

Add 3D visualization to GriddedFaultApplet (need Java3D on Mac OS first)?

Go over exception throwing in entire package to make sure it looks appropriate.

We need to create an object that can write our discretized data to a GMT grd file, which we can then make a map from using our GMT_MapGenerator.  See http://gmt.soest.hawaii.edu/gmt/doc/html/GMT_Docs/node113.html for grd-format info.  GMT uses netCDF routines to read and write these files, so NetCDF for Java (http://www.unidata.ucar.edu/packages/netcdf-java/) will presumably be helpful?


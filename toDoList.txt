**************** SHORT TERM (HIGH PRIORITY): ****************
-------------------------------------------------------------


For the SCEC-ITR CME:
---------------------

Implement retrieval of Primary Key in DAO Insert metdhods as a JDBC Transaction.

CVS Cleanup
  Make CMEDB module accessible on SunOne Module List by
    - backup up directory
    - export files
    - using CVS command line interface
         add module to repository
         import CMEDB file

Create a SCEC-URI generator function.

Create User Main Screen that says"
  "Create Resource"
  "View Resource"
  "Status of Resource"

Construct "Create Resource" Input Pages
  - Create "Construct Gridded Region" Page.
  - Create "Construct IMR" Page.
  - Create "Construct ERM" Page.

Create Server Version of HazardMapCalculator that accepts as inputs
   String URL's to "resources" only, and URI to ResourceInstanceID.
   - Write JUnit test to show this version of HazardMapCalculator runs.

Create WebService Interface to this HazardMapCalculator program.
  - Use One-Way RPC to implement non-blocking calls to the HazardMapCalculator Program.
  - Talk with Deepak about deploying this service. He has made good progress on Web Service
     deployment.

GMT_MapGenerator - implement this as a webService so we one doesn't need GMT installed (also implement as a web service and compare performance). NOTE: this is already implemented as a servlet.

SHA ProjectTestSuite : 24 Tests

GMT Web service:

	Takes script and data and generates ps and jpg files that can be accessed.

	Figure out how to get the data into the service.



For OpenSHA:
------------

Make apps that use internet connection graceful if it's not available.

wg99/02 Fortran code:

	Debug on all platforms using the test input files sent by Mike.

	Add the following adjustable parameters:

		(Mike's order of priority)
		Start time, Time interval
		M threshold (for probability outputs)
		Probability model weights
		COV values and weights
		M-logA model weights
		Treatment of R (slip rate vs area scaling)
		Magnitude pdf (sigma value)
		Segmentation model weights
		Background a and b values

	Have WG02 group make the following changes to code(?):

   		the ability to choose which of the output files to actually write.

   		 for our output file to use the same naming convention as the others 
    		(presently difficult because our file is written in the main part of 
    		the code where we don't have access to the output-file prefix)

    		addition of intermediate segment lats and lons

    		to add to our output file the name of each rupture (e.g., "SAP+SAN+SAO")

   		 the remove of all runtime prompts (presently the user is only 
    		prompted for the input filename, which apparently we can handle
    		even if we're running from the command line).




Develop HazardSpectrumApplet for Caltrans.


**************** LONG TERM (LOWER PRIORITY): ****************
-------------------------------------------------------------

Go through existing apps and list issues we'd like to improve.


IMR_GuiBean 	-extend to allow multiple IMRs to be selected, with relative weights 
		applied to each.  This will require using an epistemic list control 
		panel (generalize existing one?) to declare what to compute and 
		plot(ind. curves, mean, fractile, ...). 

		-Create capability to associate IMRs to specific source types in the calculations
		(this will take some thought).

		- For IMR_API, create a getOtherParameters() method and use this
		 here rather then getting the stdDevType, TruncType, ... by hand
		(this will make it more flexibly with new IMRs that don't have
		those parameters).  This will require implementing that method
		in the existing attenuation relationships (will require a little
		work since the otherParamsList contains one param that won't
		be needed).

ProbEqkSource	Define field to declare what type of source it is 
		(e.g., subduction zone vs normal vs reverse ...) and add to API. 
		Ned will work on what the various options should be.

ERF		-extend API to include getting max and min magnitude, and the various types of 
		sources generated (to check for compatibility with each chosen IMR)

Think about optimizing calculations in terms of not redoing anything that doesn't 
need to be redone (e.g., don't recompute ERF-list hazard curves if user only wants
to plot a different fractile).  This should be resolved with consideration to the
full range of user experiences.


ScenarioShakeMapApp

	Add plotting of rupture surface as a dot at each point on the gridded surface?
	Use getInfo for each source to provide users with information.

Fix titles of web pages (Ned's problem)

Fix GriddedFaultApplet - horz/vert scaling.

Ned - Run a forecast with non-zero mags up to mag 10 to search for numerical breakdowns (e.g., Math.pow(-num, non-integer) ) or search for for Math.pow.

SimpleGriddedFaultFactory

	we create a new instance of this object every time we create 
	a new surface; it would be more efficient to use the set methods
	before getting a new surface (use the setAll() method added by Ned).

(even lower priority below)

Allow choosing of multiple ERFs (e.g., hand built ERF_EpistemicList)

Create the following control panels in the future:

	X_ValuesInCurveControlPanel

Create SimpleFaultParameter and editor (so we can replace two PEER ERFs with one general ERF)

Implement getApplicableRegion() and isLocWithinApplicableRegion() methods in implemented ERFs.

Investigate what proper longitude limits are with respect to RelativeLocation, 0 to 360, -180 to 180, -180 to 360, or -360 to 360.

DisaggregationCalculator is similar to HazardCurveCalculator; should the two be combined?

HazardCurveApplet - In the IMT editor section the loop over independent parameters of the chosen IMT can presently deal only with DoubleDiscreteParameter objects (rather than any parameter type).  Should we generalize this?

HazardCurveApplet - Ned will go through our implementation of the PEER test cases again (to make sure Ned didn't screw anything up since he last did it).  Perhaps this should wait until we can simultaneously show the true or target value in the plot.  Eventually we'll want to make Junit tests for the PEER test cases.

EvenlyGriddedSurface: 1) make the getNthSubsetSurface() method more efficient, and have the getAveDip() method compute the dip explicitly (in case it's a subset of a listric fault)?

Decide how to handle rake=NaN in each IMR (can rake-NaN in and EarthquakeRupture object?).

Decide on and implement a licensing agreement.

Decide on and implement email groups.

Figure out why applets don't resize with browser window size on Mac OS.

Create an archived email list or discussion board for OpenSHA.

Add 3D visualization to GriddedFaultApplet (need Java3D on Mac OS first)?

Go over exception throwing in entire package to make sure it looks appropriate.

AttenRelApp:

	Problem:  if you violate a parameter constraint when hitting the add trace button 
	(rather than hitting return in the parameter editor) you need to hit add trace again
	if you accept the value.  Nitin and Vipin say this is a problem with Java (focus at
	time of exception throwing is lost).



**************** SHORT TERM (HIGH PRIORITY): ****************
-------------------------------------------------------------


BROADER ISSUES:
--------------

Convert web sites to Drupal Wiki; start with WGCEP - Peter's going to try it out.

Peter has decided on Apache software license ASL2.0; he will implement it soon.

WG02 Fortan code is not working - Kevin will talk to Okaya

Continue porting servlets and RMI stuff from gravity.usc.edu to opensha.usc.edu - Only shakeMap calc remains to be done.  - Kevin will work on this.

Fix offset in global GMT topo intensity file (email from Kevin on 9/3/09) - Kevin will deal with this

Go through main calculators as a group.  Map/UML of each calculator/application.

Develop strategy for instantiation of model components for each type of 
calculation from XML files.  In so doing we will likely revise the implementation 
of our GUIs in order to make things most efficient (e.g., in terms of showing metadata 
from a calculation, saving the state of an application, and avoiding redundant calcs 
if already done and saved in a database (the latter two have yet to be done)).   
This will involve first looking at our calculators (the various elements needed 
for the various calculations), and then considering how these relate to our GUI 
beans and control panels.  This will also involve reviewing Kevin's 
toXMLMetadata(Element root)  &  fromXMLMetadata(Element root) implementations (these 
should be our starting point).

The ability to associate sources and imrs to TectonicRegionTypes has been added to the
HazardCurveCalculator.  What remains to be done is:

	Add option to GUI (or wait until we have command-line versions based on XML first?)
	Do this for stochastic event sets (from the ERf we'll need a list for each TectonicRegionType)
	Distance filters should now be tectonic-region dependent?
	
	Ned's Note - experiments show that adding a TectonicRegionType field to EqkRupture, and setting
	this in sources and in the IMR.setEqkRupture(*) method does not increase computation
	time or bloat memory.

Distance Calculations : Approx Horizontal Distance(getApproxHorzDistance()) calculator 
does not calculate the correct distance if longitude is > 0. But Horizontal 
Distance(getHorzDistance()) always calculate the accurate distance. (Nitin tested 
using main() method in RelativeLocation class, one can just run the RelativeLocation 
class and will get to know the difference).  HAS THIS BEEN FIXED?

Post instructions for building stand-alone GUIs on our web site?

Redo PEER tests;Implement PEER tests as JUnit. - Peter will do this

GEM ERF Input file formats

	Marco will create actual file examples
	Ned will implement or review the general ERF

Investigate Performance Issues:

	Define speed vs accuracy tests (GEM_TestERF; PEER test case 10; GEM custom tests?)

	Try possible performance enhancements

		mag-distance filter
		num IMLs in x-axis of curve
		mag bin width
		grid discretization
		adaptive grid spacing (wouldn't work for event sets)
		pointSource --> IMR calcs (wouldn't work for event sets)
		Smart event filtering

Hazard map avoiding full curve calculator
		
Need to review the new site translator class (what Kevin put together)

Evaluate Kevin's implementation of site class for region web services

Look into using triangular surfaces (or at least change API to accommodate these later)?

Clean up control panels (make subdirs, and change names that are unclear, like CalcOptionControl)

Event Set Data Calculator  - update web site description; more test?; gui/xml version?; versioning for reference?

On-line short course

Geographic disaggregation

Clarify declarations of IntensityMeasureRelationship, IntensityMeasureRelationshipAPI, ScalarIntensityMeasureRelationship, and AttenuationRelationship, especially in calculators

Develop a complete set of Junit tests for the entire project (that at least tests whether any important changes have occurred).

Check that Parameter classes and APIs are being sensibly subclassed (Peter mentioned some redundant inheritances?)

Rebuild the parameter editor browser GUI (org.opensha.commons.param.editor.demo.ParameterApplet), 
which allows one to visually see the GUI interface for every parameter we've implemented 
(e.g., useful for newcomers).  The parameters implemented in this previous version didn't 
choose very good names for the examples (you could get better examples just by adopting values 
where it is presently used somewhere in our code).  What do you think about updating/improving this?  
It would be a good starting point for discussions on how to improve these editors (something Peter 
has discussed).  I guess we also need an equivalent demo for parameters inside the sha package.

Remove the use of "*" in import statements (to make refactoring easier)

See if param API method "getType()" is needed anymore.

Clean up as many Eclipse warnings as possible

IntensityMeasureRelationship defines intensity measure as: protected ParameterAPI im;
yet elsewhere we assume its a DependentParameterAPI, such as in the method:
IntensityMeasureRelationship.setIntensityMeasure(ParameterAPI intensityMeasure)
(where it's cast to DependentParameterAPI).  So far this hasn't been a problem because 
all thus-far implemented IMs are DependentParameterAPIs.  Fix this either by changing
the definition of im or putting and if statement before castings.  We could either 
change the definition of im to be a DependentParameterAPI, or put an if statement 
before sections where we currently assume it's a DependentParameterAPI.

Clean the Application build process

Clean the etc dir

Take "API" out of filenames

Merge contents of org.nshmp (new location) into the rest of the project.  Eric says he's not using the following:

	nshmp.sha.calc.remote.api.*
	nshmp.sha.calc.remote.*
	nshmp.sha.gui.beans.NFPA_GuiBean.java
	nshmp.sha.nico.*
	nshmp.sha.pager.*
	nshmp.util.AppConfigurer.java

Figure out where to put org.opensha.refFaultParamDb

Clean up contents of org.opensha.sha.gui.infoTools

Implement system for managing development (TRAC?)

Also update instructions on how to access code.

Review allowed values for location fields, and whether using radians rather than degrees for internal storage would be more efficient.

Codebase
	�	Revise exception handling
	�	Use enums where applicable (e.g. fault_type and std_dev in IMR) - Peter will 
		explain and propose something
	�	Clear out Sys.out.println and use of C & D for naming/debugging ... use logging 
		with warn levels.  Peter will propose something
	�	Survey other custom editors for possible improvements (e.g. Rupture Editor)
	�	Move to Java WebStart and/or bundled applications
	�	Better integration of threading and use of wait-cursor
	�	Persistence framework that does not require explicit read/write XML in each class
	�	Use correct modifiers (public protected private (e.g. HazardCurveCalculator)
	�	Upgrade to JFreeChart current version; buy dev guide.

Web
	�	Requirements for content of user site (e.g. demos, tutorial, any technical documentation?)
	�	Use Drupal for user site?
	�	Better user/download tracking

Other notes
	�	ArbitrarilyDiscretizedFunction - can this be DiscritizedFunction with isUniform() method?
	�	Review overlap between sha.fault and sha.surface
	�	Review PropogationEffect
	�	Fix ArbDiscretizedXYZ_dataSet ??


Make email lists for the following (with on-line archives):

	users@OpenSHA.org
	developers@OpenSHA.org
	leaders@OpenSHA.org
	advisors@OpenSHA.org


MINOR ISSUES:
------------

Multi IMR options on scenario shakemap calculator is not working properly in terms of only listing what IMRs support the chosen IMT.

Our PEER PSHA verification applications are broken (remove, or should we update with final results)?

HazardSpectrumApp crashes if source and site are more than the "Max Source-Site Distance" value (try defaults with point-source ERF).

Investigate what proper longitude limits are with respect to RelativeLocation, 0 to 360, -180 to 180, -180 to 360, or -360 to 360.  DID NITIN DO THIS?

Hazus PSHA dataset calculator - GUI-based app?

Warning/Disclaimer message is blank if no internet access (put html in jar file).

EstimateParameterEditor - problem with IntegerEstimate (won't recover if non ints included)

FractileListEstimate - add this to the parameter editor

Implement new version checking/download option in all apps (skip if no internet access)

Attenuation Relationship Plotter

	Buttons at the bottom right disappear if window is too narrow

Do MFD & gridded forecast stuff on Ned's email to himself.

Implement the attenuation relationship desired by UCLA.  This will require allowing an IMR to issue a supportedIMT_Change event so the applications can refresh accordingly.  This will also require an object on the server to communicate with an application if we ever distribute IMRs.

Work on html-based help documentation.

Revisit PEER results plotter (& data submission tool?); 

Implement color schemes at (including option for the visually impaired):

	http://geography.uoregon.edu/datagraphics/color_scales.htm

Revise faults in GMT plotting options.

add site translation for SEA_1999_AttenRel

Figure out how to add the OpenSHA logo to shakeMaps.

Find a database we can reference for lat/lon values of cities in California.  Add some of these to the control panel.  Nitin has one.  Make a web service?

SimpleListricGriddedFaultFactory has problem - run main method to find it.  Ned will look at this.

Should we create an AjustableParametersAPI for all objects that have a list of adjustable parameters?

Implement getApplicableRegion() and isLocWithinApplicableRegion() methods in implemented ERFs.




**************** LONG TERM (LOWER PRIORITY): ****************
-------------------------------------------------------------


Relax the single ERF instance at one time in the ERF and RupFroERF GUI beans if needed and memory is not an issue.

Ned - Run a forecast with non-zero mags up to mag 10 to search for numerical breakdowns (e.g., Math.pow(-num, non-integer) ) or search for for Math.pow.

EvenlyGriddedSurface: have the getAveDip() method compute the dip explicitly (in case it's a subset of a listric fault)?

Allow choosing of multiple ERFs (e.g., hand built ERF_EpistemicList)

DisaggregationCalculator is similar to HazardCurveCalculator; should the two be combined?

Decide how to handle rake=NaN in each IMR (can rake-NaN in an EarthquakeRupture object?).

Vector PSHA?

Pathway 1.5?

AttenRelApp:

	Problem:  if you violate a parameter constraint when hitting the add trace button
	(rather than hitting return in the parameter editor) you need to hit add trace again
	if you accept the value.  Nitin and Vipin say this is a problem with Java (focus at
	time of exception throwing is lost).

JFreechart problem: If the the upperBound and lowerBound of the axis are the same then JFreechart only adds a small increment to axis range, so because of this in our AttenuationRelaitonshipApp when we choose the BJF attenRel and on Y-Axis choose the Std. Dev. we get same values for all X-values. In other words, our lowerBound and upperBound are the same. JFrechart does provide a method to handle and specify minimum range between the Upperbound and LowerBound of the axis but we can't just add a number to specify the range.


STEP Implementation (has Matt done much of this???):

	CubeObsEqkRuptureGeneratior - makes ObsEqkRupture(s) from a String (of list of Strings)

	ObsEqkRuptureList - w/ all the sorting, subset selection methods

	ObsEqkRuptureListCalc - various general calcs with respect to an ObsEqkRuptureList

	MagCompletenessCalc

	GR_fitParamsCalc

	OmoriLawFitParamsCalc  

		(These last three should be able to take an ObsEqkRuptureList or input data 
		 as double[] objects for maximum efficiency and flexibility)

	Other classes .................. (once done tell ned and he'll update STEP doc)



********* OLD STUFF (NO LONGER NEEDED?) ****************
--------------------------------------------------------


Cybershake Scatter plotter



Nitin - prepare a brief documentation on the how and why I did HazardCurveServer Mode in RMI. This will also include preparing a brief documentation on RMI and webservices. This document should also include the possible flaws in the applications and what improvements are needed in the application and what's more needs to be added to generalize the application.  

Access PEER NGA data file for comparisons in our apps.

Fix GriddedFaultApplet - horz/vert scaling - may be fixed; check it out; add java 3D.  Or should we use SCEC VDO?

Look into how to save an application in its current state (and to an abitrary file name) so that a user can double click later to come back.

Solve Our MetaData Issues.  We need to be able to do three things: 1) inform the user what they are looking at in a plot (this is done); 2) save the state of a stand-alone app on the user's computer so they can relaunch later and begin where they left off; and 3) save enough information to the SRB (or equivalent) so we can tell at runtime whether a calculation has already been done, or so other's browsing the SRB will see what's available. This raises issues with respect to allowed characters in a parameter name.  Why don't we reserve the following special characters for writing the string-representation of metadata (meaning these can't be used in parameter names):

	=	- separate name/value pairs
	;	- to separate parameters
	[	- to encapsulate dependent params
	]	- to encapsulate dependent params
	:	- for writing out parameterList (or GuiBean) values (also "----" under these?)

	Check for these in the setName() methods?

	Can we avoid such special character issues using XML representation (for the case where
	we read values back in to redo a calculation)?

	With respect to GuiBeans we have discussed two approaches.  Let's take the ERF_GuiBean as
	an example.  One mode (mentioned above) is to read back in the parameter settings (from XML),
	set the parameter values accordingly, and then recreate the ERF.  If the ERF is very time
	consuming to create, then the second mode would be to read back in the serialized version
	of the object, and since all the parameter are already set, the GuiBean would not have to
	do anything.  Note that all non primitive parameter types (e.g., MagFreqDistParam and
	SimpleFaultParam) must contain all info needed by their respective editor to recreate the
	object; this info is stored in their dependent parameter list.


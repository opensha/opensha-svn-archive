**************** SHORT TERM (HIGH PRIORITY): ****************
-------------------------------------------------------------


For the SCEC-ITR CME:
---------------------

Port stand-alone applications to server mode.





For OpenSHA:
------------

(ONLY THE FIRST FOUR NEED TO BE DONE BY END OF MAY, UNLESS THE CME GOALS DEPENDENT)

Go through existing apps and list issues we'd like to improve.

Get wg99/02 Fortran code compiling on our computers.

AttenRelApp:

	Problem: when you've violated an absolute constrain by hitting return 
	(rather than hitting "Add Trace"), subsequent warning constraint violations 
	are not handled properly.  Example:  Choose BJF, set Mag=8 and add trace 
	(after accepting violation), now set Vs30=-10 and hit return (not add trace),
	now set Mag=8.1 and try to add (it defaults back to previous value).

Submit our log-log implementation formally to JFreeChart.





**************** LONG TERM (LOWER PRIORITY): ****************
-------------------------------------------------------------

IMR_GuiBean 	-extend to allow multiple IMRs to be selected, with relative weights 
		applied to each.  This will require using an epistemic list control 
		panel (generalize existing one?) to declare what to compute and 
		plot(ind. curves, mean, fractile, ...). 

		-Create capability to associate IMRs to specific source types in the calculations
		(this will take some thought).

ProbEqkSource	Define field to declare what type of source it is 
		(e.g., subduction zone vs normal vs reverse ...) and add to API. 
		Ned will work on what the various options should be.

ERF		-extend API to include getting max and min magnitude, and the various types of 
		sources generated (to check for compatibility with each chosen IMR)

		
Look into memory usage issues (e.g., out of memeory exceptions).

Think about optimizing calculations in terms of not redoing anything that doesn't 
need to be redone (e.g., don't recompute ERF-list hazard curves if user only wants
to plot a different fractile).  This should be resolved with consideration to the
full range of user experiences.


ScenarioShakeMapApp

	Add plotting of rupture surface as a dot at each point on the gridded surface?

	Use getInfo for each source to provide users with information


Fix titles of web pages (Ned's problem)

Fix GriddedFaultApplet - horz/vert scaling.

Finish implementing WG99/02 ERF (Ned's problem)

Ned - Run a forecast with non-zero mags up to mag 10 to search for numerical breakdowns (e.g., Math.pow(-num, non-integer) ) or search for for Math.pow.


SimpleGriddedFaultFactory

	we create a new instance of this object every time we create 
	a new surface; it would be more efficient to use the set methods
	before getting a new surface (use the setAll() method added by Ned).


(even lower priority below)



Allow choosing of multiple ERFs (e.g., hand built ERF_EpistemicList)

Create the following control panels in the future:

	X_ValuesInCurveControlPanel

Create SimpleFaultParameter and editor (so we can replace two PEER ERFs with one general ERF)

Implement getApplicableRegion() and isLocWithinApplicableRegion() methods in implemented ERFs.

Investigate what proper longitude limits are with respect to RelativeLocation, 0 to 360, -180 to 180, -180 to 360, or -360 to 360.

DisaggregationCalculator is similar to HazardCurveCalculator; should the two be combined?

PEER_TestsApplet - In the IMT editor section the loop over independent parameters of the chosen IMT can presently deal only with DoubleDiscreteParameter objects (rather than any parameter type).  Should we generalize this?

PEER_TestsApplet - Ned will go through our implementation of the PEER test cases again (to make sure Ned didn't screw anything up since he last did it).  Perhaps this should wait until we can simultaneously show the true or target value in the plot.  Eventually we'll want to make Junit tests for the PEER test cases.

EvenlyGriddedSurface: 1) make the getNthSubsetSurface() method more efficient, and have the getAveDip() method compute the dip explicitly (in case it's a subset of a listric fault)?

Decide how to handle rake=NaN in each IMR (can rake-NaN in and EarthquakeRupture object?).

Decide on and implement a licensing agreement.

Decide on and implement email groups.

Figure out why applets don't resize with browser window size on Mac OS.

Create an archived email list or discussion board for OpenSHA.

Add 3D visualization to GriddedFaultApplet (need Java3D on Mac OS first)?

Go over exception throwing in entire package to make sure it looks appropriate.

**************** SHORT TERM (HIGH PRIORITY): ****************
-------------------------------------------------------------

For OpenSHA:
------------

Add the Se2-Case5 Mean, 5%Fractile, and 95%Fractile cases to PEER results plotter and data-submission tool.

PEER_TestsApplet - everyone get to know this very well and meet later to discuss it.

PEER_TestResultsPlotterApplet - hand fix any missing data that comes after a zero.

Add getApplicableRegion and isLocWithinApplicableRegion methods to EqkRupForecastAPI.

Create ERF_List and its subclasses ERF_EpistemicList and ERF_AleatoryList, and then the PEER_LogicTreeERF_List

Find out status of getting out log-log implementation into the official JFreeChart framework.

Cross hairs don't work for log-log plots in our modification of JFreeChart (e.g., try it in the LogPlotTesterApp).

PEER_TestResultsPlotterApplet - make password protection more secure (if needed)?

PEER_TestResultPlotterApplet -Following files need to be added in our PEER plotter applet. These files are
result of todays checking of files for finding whether last value is 0 or not
before the missing values. 

	SET 1 files
		1. Harmsen : Case 2,4,5,7,8(2sigtrunc)
		2. Rowshandel : 7

	SET 2 files
		1. Toro - Case 5
		2. Mendez - Case 5
		3. Harmsen - Case 5
		4. Rowshandel - Case 5
		5. Tan - Case 5


For the SCEC-ITR CME:
---------------------

Reorganize output files for hazard map database.

Calculate the number of grid points in the region shown in Ned's ground
motion amplification map with a grid spacing of 0.05 degrees.

Define and implement a GeographicalRegion object (the most general being one represented with an arbitrary polygon, but we'll want a basic rectangular (& circular?) region as well).  This should have methods for determining wether an arbitrary Location object is within the Region.  This will be used by ERFs to define their region of applicability.  They will also be used to define a region for making a map.  We will also want to define methods (or subclasses) for creating a DiscretizedGeographicalRegion (again, for maps or for creating EarthquakeSource objects).  We need to think about these definitions together.

Build ScenarioShakeMapApplet (with HazardMapApplet in mind).  Then do this on server side.

Get site params from Vs30 and basin depth translator, and get Vs30 and basin depth for lat/lon.


**************** LONG TERM (LOWER PRIORITY): ****************
-------------------------------------------------------------

Investigate what proper longitude limits are with respect to RelativeLocation, 0 to 360, -180 to 180, -180 to 360, or -360 to 360.

DisaggregationCalculator is similar to HazardCurveCalculator; should the two be combined?

PEER_TestsApplet - In the IMT editor section the loop over independent parameters of the chosen IMT can presently deal only with DoubleDiscreteParameter objects (rather than any parameter type).  Should we generalize this?

PEER_TestsApplet - Ned will go through our implementation of the PEER test cases again (to make sure Ned didn't screw anything up since he last did it).  Perhaps this should wait until we can simultaneously show the true or target value in the plot.  Eventually we'll want to make Junit tests for the PEER test cases.

Move the Frankel96* data files to a better location (w/ a README or INFO file, or a header with an explanation.

X vs Y scaling still seems to be incorrect in GriddedFaultApplet

EvenlyGriddedSurface: 1) make the getNthSubsetSurface() method more efficient, and have the getAveDip() method compute the dip explicitly (in case it's a subset of a listric fault)?

Decide how to handle rake=NaN in each IMR (can rake-NaN in and EarthquakeRupture object?).

Decide on and implement a licensing agreement.

Figure out why applets don't resize with browser window size on Mac OS.

Create an archived email list or discussion board for OpenSHA.

Add 3D visualization to GriddedFaultApplet (need Java3D on Mac OS first)?

Go over exception throwing in entire package to make sure it looks appropriate.

We need to create an object that can write our discretized data to a GMT grd file, which we can then make a map from using our GMT_MapGenerator.  See http://gmt.soest.hawaii.edu/gmt/doc/html/GMT_Docs/node113.html for grd-format info.  GMT uses netCDF routines to read and write these files, so NetCDF for Java (http://www.unidata.ucar.edu/packages/netcdf-java/) will presumably be helpful?


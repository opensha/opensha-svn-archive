**************** SHORT TERM (HIGH PRIORITY): ****************
-------------------------------------------------------------


BROADER ISSUES:
--------------

Develop a complete set of Junit tests for the entire project (that at least tests whether any important changes have occurred).

Take "API" out of filenames

fork project and truncate one end? (for verification purposes as we move forward)

Merge contents of org.nshmp (new location) into the rest of the project

Figure out where to put org.opensha.refFaultParamDb

Clean up contents of org.opensha.sha.gui.infoTools

Figure out if commons.webservices (new location) is being used, and if so, what to do with it (e.g., are there security issues?) - Kevin will report back on this.

Clean up existing EventSetDataCalc versions with the next version

Implement stochastic event sets in hazard curve calculator?

Revise IMR APIs (& convert CyberShake to this?).

Move common parameters (including IMTs) out of abstract IMR and into a sub-directory (easier to find this way?)?

Develop strategy for instantiation of model components for each type of calculation from XML files (this involves looking at calculators, GUI beans, control panels, and model components).  See discussion of "Solve Our MetaData Issues" below for related issues.

Look into using triangular surfaces (or at least change API to accommodate these later)?

Implement system for managing development (TRAC?); also update instructions on how to access code.

Create capability to associate IMRs to specific source types in the calculations (this will require discussions with GEM and NSHMP).  Ned's intitial tests on adding such fields to EqkRupture does not significantly increase memory requirements.  Possibilities:

	Subduction Interface
	Subduction IntraSlab
	Shallow Crustal in Active Tectonic Regions
	Shallow Crustal in Stable Tectonic Regions

ProbEqkSource	Define field to declare what type of source it is
		(e.g., subduction zone vs normal vs reverse ...) and add to API.
		Ned will work on what the various options should be.

ERF		-extend API to include getting max and min magnitude, and the various types of
		sources generated (to check for compatibility with each chosen IMR)

Need to port servlets and RMI stuff from gravity.usc.edu to opensha.usc.edu.

Update topo files, and include global coverage (see milner email on April 3, 2009); do this when the item just above is done.

Need to review the new site translator class (what Kevin put together)

Evaluate Kevin's implementation of site class for region web services

Revise Event set data calculator (see emails)

Codebase
	¥	Extract tools to scec-commons or eq-commons (domain? org.scec.commons.[ui | 
		math |  calc | utils | io]); Extract db connections to common util class??
	¥	Review parameter framework
	¥	Revise exception handling
	¥	Use enums where applicable (e.g. fault_type and std_dev in IMR) - Peter will 
		explain and propose something
	¥	Clear out Sys.out.println and use of C & D for naming/debugging ... use logging 
		with warn levels.  Peter will propose something
	¥	Improve common editors (e.g. string, double, editors); handle warning param better.
	¥	Survey other custom editors for possible improvements (e.g. Rupture Editor)
	¥	Move to Java WebStart and/or bundled applications
	¥	Better integration of threading and use of wait-cursor
	¥	Persistence framework that does not require explicit read/write XML in each class
	¥	Code Formatting - 4 space indent
	¥	Use correct modifiers (public protected private (e.g. HazardCurveCalculator)
	¥	Alternative to nnls in more recent math package
	¥	Upgrade to JFreeChart current version; buy dev guide.
	¥	Evaluate move to Maven for build process (jar files etc)
	¥	Define potential broader structure for OpenSHA OpenRisk commons.

Documentation
	¥	Map/UML of each calculator/application
	¥	Leave no public method uncommented
	¥	Check, edit, or provide explicit description of major class hierarchies (e.g. IMR-AttRel, ERF)
	¥	No black boxes

Web
	¥	Requirements for content of user site (e.g. demos, tutorial, any technical documentation?)
	¥	Use Drupal, Django, or other for user site?
	¥	Better user/download tracking

Other notes
	¥	ArbitrarilyDiscretizedFunction - can this be DiscritizedFunction with isUniform() method?
	¥	Review overlap between sha.fault and sha.surface
	¥	Review PropogationEffect
	¥	Fix ArbDiscretizedXYZ_dataSet ??


Make email lists for the following (with on-line archives):

	users@OpenSHA.org
	developers@OpenSHA.org
	leaders@OpenSHA.org
	advisors@OpenSHA.org


MINOR ISSUES:
------------

Multi IMR options on scenario shakemap calculator is not working properly in terms of only listing what IMRs support the chosen IMT.

Our PEER PSHA verification applications are broken (remove, or should we update with final results)?

HazardSpectrumApp crashes if source and site are more than the "Max Source-Site Distance" value (try defaults with point-source ERF).

Distance Calculations : Approx Horizontal Distance(getApproxHorzDistance()) calculator does not calculate the correct distance if longitude is > 0. But Horizontal Distance(getHorzDistance()) always calculate the accurate distance. (Nitin tested using main() method in RelativeLocation class, one can just run the RelativeLocation class and will get to know the difference).  HAS THIS BEEN FIXED?

Investigate what proper longitude limits are with respect to RelativeLocation, 0 to 360, -180 to 180, -180 to 360, or -360 to 360.  DID NITIN DO THIS?

Site Translator needs to be fixed to handle the soft Soil case for Choi and Stewart model.

Hazus PSHA dataset calculator - GUI-based app?

Warning/Disclaimer message is blank if no internet access (put html in jar file).

EstimateParameterEditor - problem with IntegerEstimate (won't recover if non ints included)

FractileListEstimate - add this to the parameter editor

Implement new version checking/download option in all apps (skip if no internet access)

Attenuation Relationship Plotter

	Buttons at the bottom right disappear if window is too narrow

Do MFD & gridded forecast stuff on Ned's email to himself.

Implement the attenuation relationship desired by UCLA.  This will require allowing an IMR to issue a supportedIMT_Change event so the applications can refresh accordingly.  This will also require an object on the server to communicate with an application if we ever distribute IMRs.

Work on html-based help documentation.

Revisit PEER results plotter (& data submission tool?); implement tests as JUnit.

Implement color schemes at (including option for the visually impaired):

	http://geography.uoregon.edu/datagraphics/color_scales.htm

Add faults to GMT plotting options.

add site translation for SEA_1999_AttenRel

Figure out how to add the OpenSHA logo to shakeMaps.

Find a database we can reference for lat/lon values of cities in California.  Add some of these to the control panel.  Nitin has one.  Make a web service?

SimpleListricGriddedFaultFactory has problem - run main method to find it.  Ned will look at this.

Should we create an AjustableParametersAPI for all objects that have a list of adjustable parameters?

Implement getApplicableRegion() and isLocWithinApplicableRegion() methods in implemented ERFs.




**************** LONG TERM (LOWER PRIORITY): ****************
-------------------------------------------------------------


Relax the single ERF instance at one time in the ERF and RupFroERF GUI beans if needed and memory is not an issue.

Ned - Run a forecast with non-zero mags up to mag 10 to search for numerical breakdowns (e.g., Math.pow(-num, non-integer) ) or search for for Math.pow.

EvenlyGriddedSurface: have the getAveDip() method compute the dip explicitly (in case it's a subset of a listric fault)?

Allow choosing of multiple ERFs (e.g., hand built ERF_EpistemicList)

DisaggregationCalculator is similar to HazardCurveCalculator; should the two be combined?

IMT_GuiBean - the loop over independent parameters of the chosen IMT can presently deal only with DoubleDiscreteParameter objects (rather than any parameter type).  Should we generalize this?

Decide how to handle rake=NaN in each IMR (can rake-NaN in an EarthquakeRupture object?).

Decide on and implement a licensing agreement.

Vector PSHA?

Pathway 1.5?

AttenRelApp:

	Problem:  if you violate a parameter constraint when hitting the add trace button
	(rather than hitting return in the parameter editor) you need to hit add trace again
	if you accept the value.  Nitin and Vipin say this is a problem with Java (focus at
	time of exception throwing is lost).

JFreechart problem: If the the upperBound and lowerBound of the axis are the same then JFreechart only adds a small increment to axis range, so because of this in our AttenuationRelaitonshipApp when we choose the BJF attenRel and on Y-Axis choose the Std. Dev. we get same values for all X-values. In other words, our lowerBound and upperBound are the same. JFrechart does provide a method to handle and specify minimum range between the Upperbound and LowerBound of the axis but we can't just add a number to specify the range.



********* OLD STUFF (NO LONGER NEEDED?) ****************
--------------------------------------------------------

Patti comments
---------------
I really like the application and I have a few suggestions in regard to the
output files format.
   It would be useful to define EventIDs from the sourceID and rupture ID
   pairs. The EventID can be defined in the Src-Rup Metadata file and then
   used in the Mean and Sigma file instead of repeating the SrcID and
   RuptID
   I would prefer to keep the 'mean sigma file' as lean as possible as if
   there are many sites and many events, the size of the file can grow
   substantially
   Provide the option to write the rupture distance file, as with many
   sites this may not be used
   Provide the option to enter a threshold for the IMT to keep in the
   output files, so all the EventID-SiteID pairs with an IMT value lower
   than the threshold won't show up in the file
   Write the Mean Sigma file as follows:

            EventID_i   SiteID_i    Mean(Event_i, Site_i)
SD(Event_i, Site_i)
----------------------

Keith Comments
------------------
Second, using commas and quotes within a source name does not affect one's
ability to use CSV format. Commas can appear within a text string, because
the string doesn't end until the second double-quotes is encountered.
Double-quotes can appear _within_ a text string as long as the double-quote
is doubled, i.e., "". Two double-quotes appearing within a text string are
treated as a literal double-quote, rather than as the end of the text
string. (Try opening "test.csv" in Excel.)

Third, regarding "C," what I mean is that the output file could have the
following field list: 

SourceID
RuptureID
SiteID
AttenID
IMT
Mean
Stdev

Thus, one record refers to combination of source ID, rupture ID, site ID,
and AttenID, and gives the one Mean IM and the one Stdev IM value for that
combination. Where the current output has one line for 3 sites, the proposed
format would have three lines. Where the current output has 12 files (4
attenuation relationships x 3 intensity measure types), the proposed format
would have one file. If you'd like the schema files for the tables I have
created form your output files, I can email them. I don't know if you would
find them useful. 
-----------------------------


Cybershake Scatter plotter


Implement (has Matt done much of this???):

	CubeObsEqkRuptureGeneratior - makes ObsEqkRupture(s) from a String (of list of Strings)

	ObsEqkRuptureList - w/ all the sorting, subset selection methods

	ObsEqkRuptureListCalc - various general calcs with respect to an ObsEqkRuptureList

	MagCompletenessCalc

	GR_fitParamsCalc

	OmoriLawFitParamsCalc  

		(These last three should be able to take an ObsEqkRuptureList or input data 
		 as double[] objects for maximum efficiency and flexibility)

	Other classes .................. (once done tell ned and he'll update STEP doc)



Nitin - prepare a brief documentation on the how and why I did HazardCurveServer Mode in RMI. This will also include preparing a brief documentation on RMI and webservices. This document should also include the possible flaws in the applications and what improvements are needed in the application and what's more needs to be added to generalize the application.  

Access PEER NGA data file for comparisons in our apps.

Fix GriddedFaultApplet - horz/vert scaling - may be fixed; check it out; add java 3D.  Or should we use SCEC VDO?

Look into how to save an application in its current state (and to an abitrary file name) so that a user can double click later to come back.

Solve Our MetaData Issues.  We need to be able to do three things: 1) inform the user what they are looking at in a plot (this is done); 2) save the state of a stand-alone app on the user's computer so they can relaunch later and begin where they left off; and 3) save enough information to the SRB (or equivalent) so we can tell at runtime whether a calculation has already been done, or so other's browsing the SRB will see what's available. This raises issues with respect to allowed characters in a parameter name.  Why don't we reserve the following special characters for writing the string-representation of metadata (meaning these can't be used in parameter names):

	=	- separate name/value pairs
	;	- to separate parameters
	[	- to encapsulate dependent params
	]	- to encapsulate dependent params
	:	- for writing out parameterList (or GuiBean) values (also "----" under these?)

	Check for these in the setName() methods?

	Can we avoid such special character issues using XML representation (for the case where
	we read values back in to redo a calculation)?

	With respect to GuiBeans we have discussed two approaches.  Let's take the ERF_GuiBean as
	an example.  One mode (mentioned above) is to read back in the parameter settings (from XML),
	set the parameter values accordingly, and then recreate the ERF.  If the ERF is very time
	consuming to create, then the second mode would be to read back in the serialized version
	of the object, and since all the parameter are already set, the GuiBean would not have to
	do anything.  Note that all non primitive parameter types (e.g., MagFreqDistParam and
	SimpleFaultParam) must contain all info needed by their respective editor to recreate the
	object; this info is stored in their dependent parameter list.


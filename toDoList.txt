    **************** SHORT TERM (HIGH PRIORITY): ****************
-------------------------------------------------------------

Finish getting Frankel's 2002 code running on the Mac.

MultipleIMR_GuiBean:

	1) combine this with the IMTGuiBean (no reason to have the two separate)

	2) test it

	3) Implement the "Generate Jazus Shape files for Scenario" control panel

	4) Move averaging of XYZ datasets to the scenario shakeMap calculator 
	(created a method that takes the list of IMRs and their associated weights).
	This will later be optimized using the PropagationEffect object.

	5) check how averaging is done (e.g., on log values?); ned will do this.


Create capability to associate IMRs to specific source types in the calculations (this will take some thought and perhaps some communication with Golder).

Make a library to represent t-surfaces (or look on internet to see if someone else has come up with a good object-oriented design).

Finish the PropagationEffect object and utilize it (Ned will do this).

Re-calculate the PEER set2, case5 (including fractiles) and update the Excel spreadsheet (I changed the implementation and I believe it is now correct).

AttenuationRelationshipApp

	Fix this plotting problem: Choose ShakeMap (2003), select "Std. Dev." for the Y axis, and 
	then add plot (you can't see anything, presumably because the data only has one value).  This
	is only a problem for linear plots, which means it my be JFreeChart's issue?


GMT_MapGenerator:

	If gmt in not in /sw/bin or nothing is in usr/scec/data/gmt - force use of GMT Web Service
	
	Figure out a way to get the following dynamically (can only do this on UNIX?):

   		GMT_PATH
    		GS_PATH
    		CONVERT_PATH

Look into how to save an application in its current state (and to an abitrary file name) so that a user can double click later to come back.

Finish PEER results plotter & data submission tool (when they give us the final files).

Make all interpolations of hazard curves based on log(prob) vs log(IML) or log(EqvPoisRate) vs log(IML).  Do this by adding a method to DiscretizedFunctionAPI (e.g., getInterpolatedY_inLogXLogYDomain(double x). Ned needs to double check these.

Find a database we can reference for lat/lon values of cities in California.  Add some of these to the control panel.  Nitin has one.

Investigate what proper longitude limits are with respect to RelativeLocation, 0 to 360, -180 to 180, -180 to 360, or -360 to 360.


Solve Our MetaData Issues.  We need to be able to do three things: 1) inform the user what they are looking at in a plot (this is done); 2) save the state of a stand-alone app on the user's computer so they can relaunch later and begin where they left off; and 3) save enough information to the SRB (or equivalent) so we can tell at runtime whether a calculation has already been done, or so other's browsing the SRB will see what's available. This raises issues with respect to allowed characters in a parameter name.  Why don't we reserve the following special characters for writing the string-representation of metadata (meaning these can't be used in parameter names):

	=	- separate name/value pairs
	;	- to separate parameters
	[	- to encapsulate dependent params
	]	- to encapsulate dependent params
	:	- for writing out parameterList (or GuiBean) values (also "----" under these?)

	Can we avoid such special character issues using XML representation (for the case where 
	we read values back in to redo a calculation)?

	With respect to GuiBeans we have discussed two approaches.  Let's take the ERF_GuiBean as 
	an example.  One mode (mentioned above) is to read back in the parameter settings (from XML), 
	set the parameter values accordingly, and then recreate the ERF.  If the ERF is very time 
	consuming to create, then the second mode would be to read back in the serialized version 
	of the object, and since all the parameter are already set, the GuiBean would not have to 
	do anything.  Note that all non primitive parameter types (e.g., MagFreqDistParam and 
	SimpleFaultParam) must contain all info needed by their respective editor to recreate the 
	object; this info is stored in their dependent parameter list.


*****************************************************************

HazardSpectrumApplet - Look into making it so the ERF_GuiBean and EqkRupSelectorGuiBean use the same ERF instances (in cases where both have the same ERF, although sometime on or the other might have an ERF that the other one does not)?  This will take some thought because the present implementation of the GuiBeans are a subclass of ParameterEditor which leads to even worse memory problems for the first attempted solution.  Solve this once we have a better idea of exactly what Caltrans wants.  Perhaps we should merge the two GuiBeans into one?

Ned - implement the empty-constructor version of the  WG02_EqkRupForecast (1 realization with modal values, handle timespan correctly, and delete WG02_WRAPPER_INPUT.DAT file when done.

Ned needs to think about the following:

	Subduction Interface
	Subduction IntraSlab
	Shallow Crustal in Active Tectonic Regions
	Shallow Crustal in Stable Tectonic Regions

Fix GriddedFaultApplet - horz/vert scaling - may be fixed; check it out; add java 3D

Make J-unit tests for Campbells tests of the attenuation relationships (generalize as much as possible); shakemap tests well come from Ken later.  ned should look at.  Nitin says there are still important discrepancies.

Finish STEP map making capability according to feedback from Matt and Lucy (and solve the Vs30 on water issue).

SimpleListricGriddedFaultFactory has problem - run main method to find it.  Ned will look at this.

Explore the benefit of using RelativeLocation.getApproxHorzDistance(*) as opposed to RelativeLocation.getHorzDistance(*) in the hazard calculations.

Should we create an AjustableParametersAPI for all objects that have a list of adjustable parameters?

**************** LONG TERM (LOWER PRIORITY): ****************
-------------------------------------------------------------


ProbEqkSource	Define field to declare what type of source it is 
		(e.g., subduction zone vs normal vs reverse ...) and add to API. 
		Ned will work on what the various options should be.

ERF		-extend API to include getting max and min magnitude, and the various types of 
		sources generated (to check for compatibility with each chosen IMR)

Ned - Run a forecast with non-zero mags up to mag 10 to search for numerical breakdowns (e.g., Math.pow(-num, non-integer) ) or search for for Math.pow.

EvenlyGriddedSurface: have the getAveDip() method compute the dip explicitly (in case it's a subset of a listric fault)?

(even lower priority below)

Allow choosing of multiple ERFs (e.g., hand built ERF_EpistemicList)

Implement getApplicableRegion() and isLocWithinApplicableRegion() methods in implemented ERFs.

DisaggregationCalculator is similar to HazardCurveCalculator; should the two be combined?

HazardCurveApplet - In the IMT editor section the loop over independent parameters of the chosen IMT can presently deal only with DoubleDiscreteParameter objects (rather than any parameter type).  Should we generalize this?

Decide how to handle rake=NaN in each IMR (can rake-NaN in an EarthquakeRupture object?).

Decide on and implement a licensing agreement.

Decide on and implement email groups.

Figure out why applets don't resize with browser window size on Mac OS.

Create an archived email list or discussion board for OpenSHA.

Add 3D visualization to GriddedFaultApplet (need Java3D on Mac OS first)?

Go over exception throwing in entire package to make sure it looks appropriate.

AttenRelApp:

	Problem:  if you violate a parameter constraint when hitting the add trace button 
	(rather than hitting return in the parameter editor) you need to hit add trace again
	if you accept the value.  Nitin and Vipin say this is a problem with Java (focus at
	time of exception throwing is lost).



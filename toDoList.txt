**************** SHORT TERM (HIGH PRIORITY): ****************
-------------------------------------------------------------

For OpenSHA:
------------

HazardCurveApplet:

	-fix format of disaggregation results window 

	-put parameter editors at the top in the ParameterListEditor 
	 (rather than centered in the vertical direction)


Split the HazardCurveGuiBean into the following GuiBeans (so they can be used by our ShakeMap and HazardMap Applets):
	
	MapGuiBean  (Nitin does this)

		takes a given XYZ file and uses settings in GMT_SettingsControlPanel to 
		construct and display a map


    For the ShakeMap Applet we'll also need the following GuiBean
	
	EqkRupSelectorGuiBean

		First version can simply be a JComboBox hard-wired ruptures or use an ERF and 
		selection of src and rup index

Create the following control panels for our Applets (these will be put in a JComboBox in the App; chosing one will either show the panel in the App or present a new window):

	AxisLimitsControlPanel
	DisaggregationControlPanel
	PEER_TestCaseSelectorControlPanel
	GMT_SettingsControlPanel

    In the future we'll add:

	ERF_EpistemicListControlPanel
	X_ValuesInCurveControlPanel
	setMinSourceSiteDistanceControlPanel

Finish moving progress bar in HazardCurveCalculator (and Disagg calculator) to a separate and general class; put in 

	sha/gui/infoTools/calcProgressBar.java

Define TimeSpan object.

HazardMapCalculator - move iteration over sites inside, add progress bar for sites, and turn off progress bar in HazardCurveCalculator.

Frankel96_ERF - Add background seismicity.

Add getApplicableRegion and isLocWithinApplicableRegion methods to EqkRupForecastAPI.

Implement ERF_List objects in the HazardCurveApplet.

Create an object that will compute fractiles from a list of hazard curves - Ned will provide a detailed description.

Cross hairs don't work for log-log plots in our modification of JFreeChart (e.g., try it in the LogPlotTesterApp).

Mail JFreechart to include our log-log implementation into the official JFreeChart framework.

GriddedFaultApplet - fix plotting symbols (make all circles), and have it read the new, single Frankel fault file (Frankel96_CAL_all.txt).

AttenRelApp - make "Set Axes" button (rather than JcomoBox)


For the SCEC-ITR CME:
---------------------

Think about porting our stand-alone applications to server mode.

Think about meta data structure for haz map calcs.

Build ScenarioShakeMapApplet (with HazardMapApplet in mind).  Then do this on server side.

Get site params from Vs30 and basin depth translator, and get Vs30 and basin depth for lat/lon.




**************** LONG TERM (LOWER PRIORITY): ****************
-------------------------------------------------------------

Investigate what proper longitude limits are with respect to RelativeLocation, 0 to 360, -180 to 180, -180 to 360, or -360 to 360.

DisaggregationCalculator is similar to HazardCurveCalculator; should the two be combined?

PEER_TestsApplet - In the IMT editor section the loop over independent parameters of the chosen IMT can presently deal only with DoubleDiscreteParameter objects (rather than any parameter type).  Should we generalize this?

PEER_TestsApplet - Ned will go through our implementation of the PEER test cases again (to make sure Ned didn't screw anything up since he last did it).  Perhaps this should wait until we can simultaneously show the true or target value in the plot.  Eventually we'll want to make Junit tests for the PEER test cases.

Move the Frankel96* data files to a better location (w/ a README or INFO file, or a header with an explanation.

X vs Y scaling still seems to be incorrect in GriddedFaultApplet

EvenlyGriddedSurface: 1) make the getNthSubsetSurface() method more efficient, and have the getAveDip() method compute the dip explicitly (in case it's a subset of a listric fault)?

Decide how to handle rake=NaN in each IMR (can rake-NaN in and EarthquakeRupture object?).

Decide on and implement a licensing agreement.

Figure out why applets don't resize with browser window size on Mac OS.

Create an archived email list or discussion board for OpenSHA.

Add 3D visualization to GriddedFaultApplet (need Java3D on Mac OS first)?

Go over exception throwing in entire package to make sure it looks appropriate.

We need to create an object that can write our discretized data to a GMT grd file, which we can then make a map from using our GMT_MapGenerator.  See http://gmt.soest.hawaii.edu/gmt/doc/html/GMT_Docs/node113.html for grd-format info.  GMT uses netCDF routines to read and write these files, so NetCDF for Java (http://www.unidata.ucar.edu/packages/netcdf-java/) will presumably be helpful?


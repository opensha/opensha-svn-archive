**************** SHORT TERM (HIGH PRIORITY): ****************
-------------------------------------------------------------

For OpenSHA:
------------

AttenRelApp:

	The "Get IML at Exceed Prob" option for Y axis should read "IML at Exceed Prob"

	Problem: when you've violated an absolute constrain by hitting return 
	(rather than hitting "Add Trace"), subsequent warning constraint violations 
	are not handled properly.  Example:  Choose BJF, set Mag=8 and add trace 
	(after accepting violation), now set Vs30=-10 and hit return (not add trace),
	now set Mag=8.1 and try to add (it defaults back to previous value).

Solve problem with look and feel of *.jar applications for Java 1.4 on Mac 
(using Java 1.3 for these requires launching from the command line).


Fix titles of web pages

Fix GriddedFaultApplet - colors (red to blue) and horz/vert scaling.

HazardCurveApplet:

	- fix the OpenSHA logo

	- add tabs for better parameter visibility? (e.g., one tab for "IMR, 
	  IMT, & Site" and one for "ERF & Time Span"; timeSpan guiBean can
	  then be moved above, with one line of items below -wrapped if need
	  be)

	-epistemic list control panal - only redo hazard calculations if needed 
	(delay solving this until we figure out exactly what we need)

	

ScenarioShakeMapApp

	Have a window pop up if imr.setProbEqkRupture(*) fails
	(as it will for Abrahamson_2000 if rake not equiv to strike slip
	or if the hypocenter has not been set)

	Add plotting of rupture surface as a dot at each point on the gridded surface


Finish implementing WG99/02 ERF

Ned - Run a forecast with non-zero mags up to mag 10 to search for numerical breakdowns (e.g., Math.pow(-num, non-integer) ) or search for for Math.pow.


Submit our log-log implementation formally to JFreeChart.


SimpleGriddedFaultFactory

	we create a new instance of this object every time we create 
	a new surface; it would be more efficient to use the set methods
	before getting a new surface (use the setAll() method added by Ned).




For the SCEC-ITR CME:
---------------------

Port stand-alone applications to server mode.

Get site params from Vs30 and basin depth translator, and get Vs30 and basin depth for lat/lon.

Get wg99/02 Fortran code compiling on our computers.


**************** LONG TERM (LOWER PRIORITY): ****************
-------------------------------------------------------------

Create the following control panels in the future:

	X_ValuesInCurveControlPanel

Create SimpleFaultParameter and editor (so we can replace two PEER ERFs with one general ERF)

Implement getApplicableRegion() and isLocWithinApplicableRegion() methods in implemented ERFs.

Investigate what proper longitude limits are with respect to RelativeLocation, 0 to 360, -180 to 180, -180 to 360, or -360 to 360.

DisaggregationCalculator is similar to HazardCurveCalculator; should the two be combined?

PEER_TestsApplet - In the IMT editor section the loop over independent parameters of the chosen IMT can presently deal only with DoubleDiscreteParameter objects (rather than any parameter type).  Should we generalize this?

PEER_TestsApplet - Ned will go through our implementation of the PEER test cases again (to make sure Ned didn't screw anything up since he last did it).  Perhaps this should wait until we can simultaneously show the true or target value in the plot.  Eventually we'll want to make Junit tests for the PEER test cases.

EvenlyGriddedSurface: 1) make the getNthSubsetSurface() method more efficient, and have the getAveDip() method compute the dip explicitly (in case it's a subset of a listric fault)?

Decide how to handle rake=NaN in each IMR (can rake-NaN in and EarthquakeRupture object?).

Decide on and implement a licensing agreement.

Decide on and implement email groups.

Figure out why applets don't resize with browser window size on Mac OS.

Create an archived email list or discussion board for OpenSHA.

Add 3D visualization to GriddedFaultApplet (need Java3D on Mac OS first)?

Go over exception throwing in entire package to make sure it looks appropriate.

We need to create an object that can write our discretized data to a GMT grd file, which we can then make a map from using our GMT_MapGenerator.  See http://gmt.soest.hawaii.edu/gmt/doc/html/GMT_Docs/node113.html for grd-format info.  GMT uses netCDF routines to read and write these files, so NetCDF for Java (http://www.unidata.ucar.edu/packages/netcdf-java/) will presumably be helpful?


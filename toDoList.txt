**************** SHORT TERM (HIGH PRIORITY): ****************
-------------------------------------------------------------

For OpenSHA:
------------

EqkRupForecast.getAdjustableParamsList() - this actually returns an iterator, so shouldn't it be called getAdjustableParamsIterator()?

Create FractileCurveCalculator

	methods:	set(DiscretizedFuncList curves, Vector weights)

				curves.size() = weights.size()

				all curves in list have same num points

				assume all curves have same x values

			getFractile(double fraction)

				0²fraction²1


For the editors of IntegerParameter, DoubleParameter, and WarningDoubleParameter, make the text field un-editable if min = max.

Create a WarningIntegerParameter & an associated editor (if needed).

Run a forecast with non-zero mags up to mag 10 to search for numerical breakdowns (e.g., pow(-num, non-integer) )

HazardCurveApplet:

	-fix format of disaggregation results window 

	- check disaggregation (seems to be messed up)

	-put parameter editors at the top in the ParameterListEditor 
	 (rather than centered in the vertical direction)

	-change "Select Control" to "Control Panels"


Evaluate:
	
	MapGuiBean  (Nitin does this)

		takes a given XYZ file and uses settings in GMT_SettingsControlPanel to 
		construct and display a map
	
	EqkRupSelectorGuiBean

		First version can simply be a JComboBox hard-wired ruptures or use an ERF and 
		selection of src and rup index

ERF_EpistemicListControlPanel

	add to control panels list only when an ERF_EpistemicList has been chosen 
	(and pop it up automatically so the user knows he has to do something)

Create the following control panels in the future:

	X_ValuesInCurveControlPanel
	setMinSourceSiteDistanceControlPanel


CalcProgressBar - move initProgressFrame() method inside?

Finish TimeSpan object.

HazardMapCalculator - move iteration over sites inside, add progress bar for sites, and turn off progress bar in HazardCurveCalculator.

Debug ERF_List objects in the HazardCurveApplet.

Cross hairs don't work for log-log plots in our modification of JFreeChart (e.g., try it in the LogPlotTesterApp).

Mail JFreechart to include our log-log implementation into the official JFreeChart framework.

Look at GriddedFaultApplet - plotting symbols (make all circles) and check that horz and vert scaling is correct.

AttenRelApp - make "Set Axes" button (rather than JcomoBox)

HazardCurveCalc - move initialization of hazFunction y-values to 1 inside the calculator (outside of applet), and move taking the log of it's x-axis values (for condProbFunc) outside the calculator (inside the applet with an if(IMT = SA or PGA or PGV) statement before).  Reconsider this entire calculation sequence.


For the SCEC-ITR CME:
---------------------


Think about porting our stand-alone applications to server mode.

Think about meta data structure for haz map calcs.

Build ScenarioShakeMapApplet (with HazardMapApplet in mind).  Then do this on server side?

Get site params from Vs30 and basin depth translator, and get Vs30 and basin depth for lat/lon.


**************** LONG TERM (LOWER PRIORITY): ****************
-------------------------------------------------------------

Implement getApplicableRegion() and isLocWithinApplicableRegion() methods in implemented ERFs.

Investigate what proper longitude limits are with respect to RelativeLocation, 0 to 360, -180 to 180, -180 to 360, or -360 to 360.

DisaggregationCalculator is similar to HazardCurveCalculator; should the two be combined?

PEER_TestsApplet - In the IMT editor section the loop over independent parameters of the chosen IMT can presently deal only with DoubleDiscreteParameter objects (rather than any parameter type).  Should we generalize this?

PEER_TestsApplet - Ned will go through our implementation of the PEER test cases again (to make sure Ned didn't screw anything up since he last did it).  Perhaps this should wait until we can simultaneously show the true or target value in the plot.  Eventually we'll want to make Junit tests for the PEER test cases.

EvenlyGriddedSurface: 1) make the getNthSubsetSurface() method more efficient, and have the getAveDip() method compute the dip explicitly (in case it's a subset of a listric fault)?

Decide how to handle rake=NaN in each IMR (can rake-NaN in and EarthquakeRupture object?).

Decide on and implement a licensing agreement.

Decide on and implement email groups.

Figure out why applets don't resize with browser window size on Mac OS.

Create an archived email list or discussion board for OpenSHA.

Add 3D visualization to GriddedFaultApplet (need Java3D on Mac OS first)?

Go over exception throwing in entire package to make sure it looks appropriate.

We need to create an object that can write our discretized data to a GMT grd file, which we can then make a map from using our GMT_MapGenerator.  See http://gmt.soest.hawaii.edu/gmt/doc/html/GMT_Docs/node113.html for grd-format info.  GMT uses netCDF routines to read and write these files, so NetCDF for Java (http://www.unidata.ucar.edu/packages/netcdf-java/) will presumably be helpful?


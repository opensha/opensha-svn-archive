package scratchJavaDevelopers.martinez;

import java.util.ArrayList;
import java.util.TreeMap;

import org.opensha.sha.imr.AttenuationRelationship;
import org.opensha.data.function.*;

public abstract class VulnerabilityModel implements Trackable {
	/** These variables are useful for implementing the Trackable Interface **/
	private static ArrayList<Trackable> registeredTypes = new ArrayList<Trackable>();
	private static TreeMap<String, ArrayList<Trackable>> tracker = new TreeMap<String, ArrayList<Trackable>>();
	// A list of fully qualified class names that the implementing Vulnerability Supports (i.e. IMTs, StructureTypes)
	protected ArrayList<String> supportedTypes = null;
	
	/** These variables are sueful for implementing VulnerabilityFunctions **/
	@SuppressWarnings("unused")
	private static final String SA = AttenuationRelationship.SA_NAME;
	@SuppressWarnings("unused")
	private static final String PGA = AttenuationRelationship.PGA_NAME;
	private double period = 0.0;
	
	protected double ADF;
	protected double BDF;
	protected int NIML;
	
	////////////////////////////////////////////////////////////////////////////////
	//                    Minimum Functions to Implement Trackable                //
	////////////////////////////////////////////////////////////////////////////////
	/**
	 * See the generic contract in Trackable.
	 * @see org.riskagora.devel.Trackable
	 */
	public ArrayList<Trackable> getRegisteredTypes() {
		return registeredTypes;
	}

	/**
	 * See the generic contract in Trackable.
	 * @see org.riskagora.devel.Trackable
	 */
	public ArrayList<Trackable> getSupportedTypes(Trackable obj) {
		String tId = obj.getTrackableId();
		ArrayList<Trackable> rtn = null;
		if(tracker.containsKey(tId)) {
			rtn = tracker.get(tId);
		}
		return rtn;
	}

	/**
	 * See the generic contract in Trackable.
	 * @see org.riskagora.devel.Trackable
	 */
	public String getTrackableId() {
		String str = (this.getClass()).toString();
		return str.substring(6);
	}

	/**
	 * See the generic contract in Trackable.
	 * @see org.riskagora.devel.Trackable
	 */
	public void register(ArrayList<String> types) {
		Trackable t = (Trackable) this;
		
		// Add this to the list of known registered types.
		if(registeredTypes.indexOf(t) == -1)
			registeredTypes.add(t);
		
		// Add all the supported types to the tracker
		for(int i = 0; i < types.size(); ++i) {
			String type = types.get(i);
			ArrayList<Trackable> supported = tracker.get(type);
			if(supported == null)
				supported = new ArrayList<Trackable>();
			supported.add(t);
			tracker.put(type, supported);
		}
	}
	
	/**
	 * See the generic contract in Trackable.
	 * @see org.riskagora.devel.Trackable
	 */
	public boolean equals(Object o) {
		if(o == null) return false;
		if(! (o instanceof StructureType) ) return false;
		String tId = this.getTrackableId();
		String oId = (o.getClass().toString()).substring(6);
		return tId.equals(oId);
	}
	
	
	////////////////////////////////////////////////////////////////////////////////
	//                               Public Functions                             //
	////////////////////////////////////////////////////////////////////////////////
	public ArrayList<StructureType> getLibraryOfTypes() {
		ArrayList<StructureType> st = new ArrayList<StructureType>();
		for(int i = 0; i < registeredTypes.size(); ++i) {
			st.add( ( (StructureType) registeredTypes.get(i) ) );
		}
		return st;
	}
	
	public ArrayList<String> getSupportedTypes() {
		return supportedTypes;
	}
	
	public double getADF() {
		return ADF;
	}
	
	public double getBDF() {
		return BDF;
	}

	public double getPeriod() {
		return period;
	}

	public void setPeriod(double period) {
		this.period = period;
	}
	
	/**
	 * Fetches the IML values out of the DF Lookup Table.
	 * @return An <code>ArrayList</code> of doubles representing the
	 * IML values for the current Vulnerability Model.
	 */
	public ArrayList<Double> getIMLVals() {
		ArrayList<double[]> tmp = getDFTable();
		ArrayList<Double> rtn = new ArrayList<Double>();
		
		for(int i = 0; i < tmp.size(); ++i) {
			double[] entry = tmp.get(i);
			rtn.add(entry[1]);
		}
		return rtn;
	}
	
	/**
	 * Fetches the DF values out of the DF Lookup Table.
	 * @return An <code>ArrayList</code> of doubles representing the
	 * DF values for the current Vulnerability Model.
	 */
	public ArrayList<Double> getDFVals() {
		ArrayList<double[]> tmp = getDFTable();
		ArrayList<Double> rtn = new ArrayList<Double>();
		
		for(int i = 0; i < tmp.size(); ++i) {
			double[] entry = tmp.get(i);
			rtn.add(entry[0]);
		}
		return rtn;
	}
	
	/**
	 * @return The number of Intensity Measure Levels for the current Vulnerability Model.
	 */
	public double getNIML() {
		return NIML;
	}
	
	////////////////////////////////////////////////////////////////////////////////
	//                             Abstract Functions                             //
	////////////////////////////////////////////////////////////////////////////////
	
	/**
	 * Gets the IML values associated with the current VulnerabilityModel.  And puts
	 * them into the X-values of a new </code>DiscretizedFunc</code> object.  The 
	 * Y-values are all initialized to zero.
	 * 
	 * @return A new <code>DiscretizedFunc</code> with X-values representing the IML
	 * values for the current Vulnerability Model, and Y-Values all set to Zero.
	 */
	public abstract DiscretizedFunc getIMLForHazardTemplate();
	
	/**
	 * @return An <code>ArrayList</code> containing the IML values for the current Vulnerability Model.
	 */
	public abstract ArrayList<Double> getIntensityMeasureLevels();
	
	/**
	 * @return The Intensity Measure Type used with the current Vulnerability Model.
	 */
	public abstract String getIMT();
	
	/**
	 * The DF Lookup Table has dimension NIML x 3 and holds the IML, MDF, and COV
	 * values associated with the current Vulnerability Model.  The structure of
	 * this table is as follows:<br />
	 * <pre>
	 * 			\________________________________________________
	 * 		IML  |  IML1	IML2	IML3	....	IML(NIML)
	 * 		MDF  |	MDF1	MDF2	MDF3	....	MDF(NIML)
	 * 		COV  |	COV1	COV2	COV3	....	COV(NIML
	 * </pre>
	 * @return The DF lookup table used with the current Vulnerability Model.
	 */
	public abstract ArrayList<double[]> getDFTable();
	
	/**
	 * Interpolates the MDF values found in the DFTable for the given IML.
	 * 
	 * @param IML The desired Intensity Measure Level.
	 * @return The mean Damage Factor for the given IML.
	 */
	public abstract double getDF(double IML);

}

package scratchJavaDevelopers.martinez.beans;

import java.util.*;
import javax.swing.*;

import org.opensha.param.*;
import org.opensha.param.event.*;
import org.opensha.param.editor.ConstrainedStringParameterEditor;

import scratchJavaDevelopers.martinez.VulnerabilityModels.*;
import scratchJavaDevelopers.martinez.VulnerabilityModels.CureeCaltech.*;

public class VulnerabilityBean extends GuiBeanAPI {
	private ConstrainedStringParameterEditor editor = null;
	private StringParameter vulnParam = null;
	private static final String VULNERABILITY_PARAM = "Vulnerability Model";
	ArrayList<VulnerabilityModel> vms = new ArrayList<VulnerabilityModel>();
	private VulnerabilityModel vulnerability = null;
	private EventListener listener = null;
	
	////////////////////////////////////////////////////////////////////////////////
	//                              Public Functions                              //
	////////////////////////////////////////////////////////////////////////////////
	
	public VulnerabilityBean() {
		ArrayList<String> strings = new ArrayList<String>();
		// Add all the available vulnerabilities here
		vms.add(new CCSmallHouseTypical());
		vms.add(new CCSmallHouseRetro());
		vms.add(new CCLargeHouseTypical());
		vms.add(new CCLargeHouseWaistWall());
		vms.add(new CCLargeHouseImmediateOccupancy());
		vms.add(new CCLargeHouseRigidDiaphram());
		vms.add(new CCTownhouseTypical());
		vms.add(new CCTownhouseLimitedDrift());
		for(int i = 0; i < vms.size(); ++i)
			strings.add(vms.get(i).getDisplayName());
		vulnerability = vms.get(0);
		listener = new VulnerabilityParameterListener();
		
		vulnParam = new StringParameter(VULNERABILITY_PARAM, strings, strings.get(0));
		vulnParam.addParameterChangeListener((ParameterChangeListener) listener);
		vulnParam.addParameterChangeFailListener((ParameterChangeFailListener) listener);
	}
	
	public VulnerabilityModel getCurrentModel() { return vulnerability; }
	public StringParameter getParameter() { return vulnParam;}
	
	////////////////////////////////////////////////////////////////////////////////
	//                  Minimum Functions to Extend GuiBeanAPI                    //
	////////////////////////////////////////////////////////////////////////////////
	@Override
	/**
	 * See the general contract in GuiBeanAPI.
	 */
	public Object getVisualization(int type) {
		if(!isVisualizationSupported(type))
			throw new IllegalArgumentException("Only the Application type is supported at this time.");
		if(type == GuiBeanAPI.APPLICATION) {
			return getApplicationVisualization();
		}
		return null;
	}
	@Override
	/**
	 * See the general contract in GuiBeanAPI.
	 */
	public String getVisualizationClassName(int type) {
		String cname = "";
		if(type == GuiBeanAPI.APPLICATION) {
			cname = "javax.swing.JPanel";
		}
		
		return cname;
	}
	@Override
	/**
	 * See the general contract in GuiBeanAPI.
	 */
	public boolean isVisualizationSupported(int type) {
		return type == GuiBeanAPI.APPLICATION;
	}

	////////////////////////////////////////////////////////////////////////////////
	//                             Private Functions                              //
	////////////////////////////////////////////////////////////////////////////////
	
	private JPanel getApplicationVisualization() {
		if(editor == null)
			editor = new ConstrainedStringParameterEditor(vulnParam);
		return editor;
	}
	
	private void handleVulnerabilityChange(ParameterChangeEvent event) {
		String newVuln = (String) event.getNewValue();
		for(int i = 0; i < vms.size(); ++i ) {
			if(newVuln.equals(vms.get(i).getDisplayName())) {
				vulnerability = vms.get(i);
				break;
			}
		}
	}
	private class VulnerabilityParameterListener implements ParameterChangeListener, ParameterChangeFailListener {

		public void parameterChange(ParameterChangeEvent event) {
			if(VULNERABILITY_PARAM.equals(event.getParameterName()))
				handleVulnerabilityChange(event);
		}

		public void parameterChangeFailed(ParameterChangeFailEvent event) {
			JOptionPane.showMessageDialog(null, "The input value of " + event.getBadValue() +
					" is out of range.", "Failed to Change Value", JOptionPane.ERROR_MESSAGE);
		}
		
	}
}
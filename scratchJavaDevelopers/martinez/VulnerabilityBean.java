package scratchJavaDevelopers.martinez;

import java.util.ArrayList;
import javax.swing.JPanel;

import org.opensha.param.*;
import org.opensha.param.editor.ConstrainedStringParameterEditor;

public class VulnerabilityBean extends GuiBeanAPI {
	private ConstrainedStringParameterEditor editor = null;
	private StringParameter parameter = null;
	
	ArrayList<VulnerabilityModel> vms = new ArrayList<VulnerabilityModel>();
	
	////////////////////////////////////////////////////////////////////////////////
	//                              Public Functions                              //
	////////////////////////////////////////////////////////////////////////////////
	
	public VulnerabilityBean() {
		ArrayList<String> strings = new ArrayList<String>();
		// Add all the available vulnerabilities here
		vms.add(new KLPGAVlnFn());
		for(int i = 0; i < vms.size(); ++i)
			strings.add(vms.get(i).getDisplayName());
		parameter = new StringParameter("Vulnerability Model", strings, strings.get(0));
	}
	
	public VulnerabilityModel getCurrentModel() {
		String currentParamValue = (String) parameter.getValue();
		for(int i = 0; i < vms.size(); ++i) {
			if(currentParamValue.equals(vms.get(i).getDisplayName())) {
				return vms.get(i);
			}
		}
		throw new IllegalStateException("The current parameter value has no associated Vulnerability.");
	}
	
	public StringParameter getParameter() {
		return parameter;
	}
	////////////////////////////////////////////////////////////////////////////////
	//                  Minimum Functions to Extend GuiBeanAPI                    //
	////////////////////////////////////////////////////////////////////////////////
	@Override
	/**
	 * See the general contract in GuiBeanAPI.
	 */
	public Object getVisualization(int type) {
		if(!isVisualizationSupported(type))
			throw new IllegalArgumentException("Only the Application type is supported at this time.");
		if(type == GuiBeanAPI.APPLICATION) {
			return getApplicationVisualization();
		}
		return null;
	}
	@Override
	/**
	 * See the general contract in GuiBeanAPI.
	 */
	public String getVisualizationClassName(int type) {
		String cname = "";
		if(type == GuiBeanAPI.APPLICATION) {
			cname = "javax.swing.JPanel";
		}
		
		return cname;
	}
	@Override
	/**
	 * See the general contract in GuiBeanAPI.
	 */
	public boolean isVisualizationSupported(int type) {
		return type == GuiBeanAPI.APPLICATION;
	}

	////////////////////////////////////////////////////////////////////////////////
	//                             Private Functions                              //
	////////////////////////////////////////////////////////////////////////////////
	
	private JPanel getApplicationVisualization() {
		if(editor == null)
			editor = new ConstrainedStringParameterEditor(parameter);
		return editor;
	}
}
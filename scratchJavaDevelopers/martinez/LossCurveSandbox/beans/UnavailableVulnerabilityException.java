package scratchJavaDevelopers.martinez.LossCurveSandbox.beans;

/**
 * An exception wrapper class indicating that a <code>VulnerabilityBean</code>
 * attempted to set a currently unavailable vulnerability as its current 
 * vulnerability. When this is thrown one should assume the old
 * &ldquo;current&rdquo; model is still current. A check can be performed on
 * the thrown exception to find the still-current model name and the model name
 * that was requested and unavailable.
 * 
 * @author <a href="mailto:emartinez@usgs.gov">Eric Martinez</a>
 */
public class UnavailableVulnerabilityException extends Exception {
	// Required variable for serialization.
	private static final long	serialVersionUID	= 0xEAE0850C;

	private String currentModel   = null;
	private String requestedModel = null;
	
	/**
	 * See the general contract in <code>Exception</code>.
	 * @see java.lang.Exception
	 */
	public UnavailableVulnerabilityException(String currentModel,
			String requestedModel) {
		super();
		this.currentModel   = currentModel;
		this.requestedModel = requestedModel;
		fillInStackTrace();
	}
	
	/**
	 * See the general contract in <code>Exception</code>.
	 * @see java.lang.Exception
	 */
	public UnavailableVulnerabilityException(String message,
			String currentModel, String requestedModel) {
		super(message);
		this.currentModel   = currentModel;
		this.requestedModel = requestedModel;
		fillInStackTrace();
	}
	
	/**
	 * See the general contract in <code>Exception</code>.
	 * @see java.lang.Exception
	 */
	public UnavailableVulnerabilityException(String message, Throwable cause,
			String currentModel, String requestedModel) {
		super(message, cause);
		this.currentModel   = currentModel;
		this.requestedModel = requestedModel;
		fillInStackTrace();
	}
	
	/**
	 * See the general contract in <code>Exception</code>.
	 * @see java.lang.Exception
	 */
	public UnavailableVulnerabilityException(Throwable cause,
			String currentModel, String requestedModel) {
		super(cause);
		this.currentModel   = currentModel;
		this.requestedModel = requestedModel;
		fillInStackTrace();
	}
	
	/**
	 * @return The current vulnerability model stored in the vulnerability bean.
	 */
	public String getCurrentModel() {
		return this.currentModel;
	}
	
	/**
	 * @return The vulnerability model that was unavailable.
	 */
	public String getRequestedModel() {
		return this.requestedModel;
	}
}
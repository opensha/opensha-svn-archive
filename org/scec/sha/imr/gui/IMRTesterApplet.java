 package org.scec.sha.imr.gui;

import java.awt.*;
import java.awt.event.*;
import java.io.*;
import java.util.*;

import javax.swing.*;
import javax.swing.border.*;
import javax.swing.text.*;

import com.jrefinery.chart.*;
import com.jrefinery.chart.tooltips.*;
import com.jrefinery.data.*;

import org.scec.data.function.*;
import org.scec.gui.*;
import org.scec.gui.plot.jfreechart.*;
import org.scec.param.*;
import org.scec.param.editor.*;
import org.scec.param.event.*;


/**
 *  <b>Title:</b> IMRTesterApplet<br>
 *  <b>Description:</b> Applet that allows testing of independent and dependent
 *  parameters in IMRs. You can plot the standard deviation, mean, and
 *  exceedence probability by setting all independent parameters values except
 *  the one choosen for the x-axis. The x-axis is generated by the constraints
 *  of the choosen independent variable for the x-axis. This applet doesn't
 *  require a Site nor a Potential Earthquake, which are normaly necessary to
 *  calculate all the independent parameters. The purpose of the Applet is to
 *  test implemented IMRs at it's simplest level.<br>
 *  <b>Copyright:</b> Copyright (c) 2001<br>
 *  <b>Company:</b> <br>
 *
 *
 * @author     Steven W. Rock
 * @created    April 17, 2002
 * @see        BJF_1997_IMR
 * @see        AS_1997_IMR
 * @version    1.0
 */

public class IMRTesterApplet extends JApplet
    implements
        ParameterChangeFailListener,
        ParameterChangeWarningListener,
        ItemListener
{

    protected final static String C = "IMRTesterApplet";
    protected final static boolean D = false;

    protected static int counter = 0;

  /**
   * these four values save the custom axis scale specified by user
   */
    protected double minXValue;
    protected double maxXValue;
    protected double minYValue;
    protected double maxYValue;
    protected boolean customAxis = false;



    // Create the x-axis and y-axis - either normal or log
    com.jrefinery.chart.NumberAxis xAxis = null;
    com.jrefinery.chart.NumberAxis yAxis = null;

    protected Object lock = new Object();

    /**
     *  Used to create the parameter listener at runtime dynamically from this
     *  string
     */
    public final static String PARAM_LISTENER = "org.scec.sha.imr.gui.IMRParameterChangeListener";

    /**
     *  Number of data points to generate for x-axis, used in iterating over
     *  constraints of x-axis
     */
    protected final static int NUM = 30;

    /**
     *  Placeholder for currently selected IM
     */
    //protected ParameterAPI selectedIM = null;

    /**
     *  Placeholder for currently selected IM name and value. Used for
     *  coefficients lookup in the hashtable. The string format is "IM
     *  Type/Value". For example "SA/1.2" or "PGM/PGA".
     */
    //protected String selectedIMNameAndValue = "";



    //static String imagePath = "images";

    /**
     *  Currently selected IMR and related information needed for the gui to
     *  work
     */
    IMRGuiBean imr = null;

    /**
     *  List that contains the lazy instantiation of imrs via reflection and the
     *  imr full class names
     */
    protected IMRGuiList imrs = new IMRGuiList();


    protected boolean inParameterChangeWarning = false;
    protected int addButtonCount = 0;
    protected int clearButtonCount = 0;
    protected int toggleButtonCount = 0;




    boolean isStandalone = false;

    // Plot panel insets

    Insets plotInsets = new Insets( 4, 10, 4, 4 );
    Insets defaultInsets = new Insets( 4, 4, 4, 4 );
    Insets emptyInsets = new Insets( 0, 0, 0, 0 );


    protected final static int W = 820;
    protected final static int H = 670;
    protected final static int A1 = 360;
    protected final static int A2 = 430;
    protected final static Font BUTTON_FONT = new java.awt.Font( "Dialog", 1, 11 );
    protected final static Font LEGEND_FONT = new java.awt.Font( "Arial", Font.PLAIN, 7 );

    /**
     *  Min number of data points where if you have less in a Discretized
     *  Function, the points are drawn with symbols, else just a smooth line in
     *  drawn
     */
    protected final static int MIN_NUMBER_POINTS = 15;





    /**
     *  Temp until figure out way to dynamically load classes during runtime
     */
    protected final static String BJF_CLASS_NAME = "org.scec.sha.imr.classicImpl.BJF_1997_IMR";
    protected final static String AS_CLASS_NAME = "org.scec.sha.imr.classicImpl.AS_1997_IMR";
    protected final static String C_CLASS_NAME = "org.scec.sha.imr.classicImpl.Campbell_1997_IMR";
    protected final static String SCEMY_CLASS_NAME = "org.scec.sha.imr.classicImpl.SCEMY_1997_IMR";
    protected final static String F_CLASS_NAME = "org.scec.sha.imr.classicImpl.Field_2000_IMR";
    protected final static String A_CLASS_NAME = "org.scec.sha.imr.classicImpl.Abrahamson_2000_IMR";
    protected final static String CB_CLASS_NAME = "org.scec.sha.imr.classicImpl.CB_2003_IMR";

    /**
     *  Temp until figure out way to dynamically load classes during runtime
     */
    protected final static String BJF_NAME = "Boore, Joyner, & Fumal (1997)";
    protected final static String AS_NAME = "Abrahamson & Silva (1997)";
    protected final static String C_NAME = "Campbell (1997) w/ erratum (2000) changes";
    protected final static String SCEMY_NAME = "Sadigh et al. (1997)";
    protected final static String F_NAME = "Field (2000)";
    protected final static String A_NAME = "Abrahamson (2000)";
    protected final static String CB_NAME = "Campbell & Bozorgnia (2003)";


    /**
     *  Hashmap that maps picklist imr string names to the real fully qualified
     *  class names
     */
    protected static HashMap imrNames = new HashMap();


    /**
     *  NED - Here is where you can add the new IMRS, follow my examples below
     *  Populates the imrs hashmap with the strings in the picklist for the
     *  applet mapped to the class names of the imrs. This will use the class
     *  loader to load these
     */
    static {
        if ( imrNames == null ) imrNames = new HashMap();
        imrNames.clear();
        imrNames.put( BJF_NAME, BJF_CLASS_NAME );
        imrNames.put( AS_NAME, AS_CLASS_NAME );
        imrNames.put( C_NAME, C_CLASS_NAME );
        imrNames.put( SCEMY_NAME, SCEMY_CLASS_NAME );
        imrNames.put( F_NAME, F_CLASS_NAME );
        imrNames.put( A_NAME, A_CLASS_NAME );
        imrNames.put( CB_NAME, CB_CLASS_NAME );

        try { UIManager.setLookAndFeel( UIManager.getCrossPlatformLookAndFeelClassName() ); }
        catch ( Exception e ) {}
    }


    protected int currentControlsBar = A1;
    protected int currentMainBar = A2;

    /**
     *  Used to determine if shoudl switch to new IMR, and for display purposes
     */
    public String currentIMRName = "";

    //setting the legend string
    protected String legend=null;

    private final static String AUTO_SCALE = "Auto Scale";
    private final static String CUSTOM_SCALE = "Custom Scale";
    final static Dimension COMBO_DIM = new Dimension( 180, 20 );
    final static Dimension BUTTON_DIM = new Dimension( 80, 20 );
    final static String NO_PLOT_MSG = "No Plot Data Available";
    final static GridBagLayout GBL = new GridBagLayout();
    Color darkBlue = new Color( 80, 80, 133 );
    Color lightBlue = new Color( 200, 200, 230 );
    Color background = Color.white;
    SidesBorder topBorder = new SidesBorder( darkBlue, background, background, background );
    SidesBorder bottomBorder = new SidesBorder( background, darkBlue, background, background );
    OvalBorder oval = new OvalBorder( 7, 4, darkBlue, darkBlue );
    JPanel outerPanel = new JPanel();
    JPanel outerControlPanel = new JPanel();
    JPanel mainPanel = new JPanel();
    JPanel titlePanel = new JPanel();
    JPanel plotPanel = new JPanel();
    JPanel innerPlotPanel = new JPanel();
    JLabel titleLabel = new JLabel();
    JPanel controlPanel = new JPanel();
    JButton clearButton = new JButton();
    JButton addButton = new JButton();
    JPanel parametersPanel = new JPanel();
    JPanel buttonPanel = new JPanel();
    JPanel inputPanel = new JPanel();
    JPanel sheetPanel = new JPanel();
    JSplitPane parametersSplitPane = new JSplitPane();
    JSplitPane mainSplitPane = new JSplitPane();
    JScrollPane dataScrollPane = new JScrollPane();
    JTextArea pointsTextArea = new JTextArea();
    JButton toggleButton = new JButton();
    private boolean yLog = false;
    private boolean xLog = false;
    JComboBox rangeComboBox = new JComboBox();
    int titleSize = 0;

    //variables for the legend Panel, for our customise legend
    private JTextPane legendPane= new JTextPane();
    private JScrollPane legendScrollPane=new JScrollPane();
    private JPanel legendPanel =new JPanel();
    private SimpleAttributeSet setLegend;

    /*setting the colors for the different plots so that legends
     *can be shown with the same color
     */

    Color[] legendColor={Color.red,Color.blue,Color.green,Color.orange,Color.magenta,
                       Color.cyan,Color.pink,Color.yellow,Color.darkGray};
    Paint[] legendPaint={Color.red,Color.blue,Color.green,Color.orange,Color.magenta,
                       Color.cyan,Color.pink,Color.yellow,Color.darkGray};



    protected ChartPanel panel;
    protected boolean graphOn = false;

    protected String lastXYAxisName = "";

    JComboBox imrComboBox = new JComboBox();
    JLabel imrLabel = new JLabel();
    protected javax.swing.JFrame frame;

    JCheckBox jCheckxlog = new JCheckBox();
    JCheckBox jCheckylog = new JCheckBox();
    JCheckBox plotColorCheckBox = new JCheckBox();

    boolean isWhite = true;

    DiscretizedFuncList functions = new DiscretizedFuncList();
    DiscretizedFunctionXYDataSet data = new DiscretizedFunctionXYDataSet();
    private JLabel jAxisScale = new JLabel();

    /**
     * for Y-log, 0 values will be converted to this small value
     */
    private double Y_MIN_VAL = 1e-8;

    /**
     *  Construct the applet
     */
    public IMRTesterApplet() {
      data.setFunctions(functions);

      // for Y-log, convert 0 values in Y axis to this small value
      data.setConvertZeroToMin(true,Y_MIN_VAL);
    }


    /**
     *  Sets the frame attribute of the IMRTesterApplet object
     *
     * @param  newFrame  The new frame value
     */
    public void setFrame( JFrame newFrame ) {
        frame = newFrame;
    }


    /**
     *  Get a parameter value
     *
     * @param  key  Description of the Parameter
     * @param  def  Description of the Parameter
     * @return      The parameter value
     */
    public String getParameter( String key, String def ) {
        return isStandalone ? System.getProperty( key, def ) :
                ( getParameter( key ) != null ? getParameter( key ) : def );
    }

    /**
     *  Gets the currentIMRName attribute of the IMRTesterApplet object
     *
     * @return    The currentIMRName value
     */
    public String getCurrentIMRName() {
        return currentIMRName;
    }

    /**
     *  Get Applet information
     *
     * @return    The appletInfo value
     */
    public String getAppletInfo() {
        return "IMR Tester Applet";
    }

    /**
     *  Get parameter info
     *
     * @return    The parameterInfo value
     */
    public String[][] getParameterInfo() {
        return null;
    }


    /**
     *  Pops up a JFileChooser to set the filename to save the plot data to.
     *  Contains special case for Windows systems to choose the C:\\ as the root
     *  path, otherwise use the first root path. This function should work on
     *  all operating systems.
     *
     * @return    The fileFromUser value
     */
    protected File getFileFromUser() {
        JFileChooser fc = new JFileChooser();

        // use current directory

        File[] roots = File.listRoots();
        String path = roots[0].getAbsolutePath();

        for ( int i = 0; i < roots.length; i++ ) {

            String path1 = roots[i].getAbsolutePath();
            //if(D) System.out.println("Path: " + path);

            if ( path1.startsWith( "C:" ) )
                path = path1;

        }

        fc.setCurrentDirectory( new File( path ) );

        // set default name
        fc.setSelectedFile( new File( "data.txt" ) );

        // show dialog for opening files
        int result = fc.showSaveDialog( this );

        if ( result != fc.APPROVE_OPTION )
            return null;

        return fc.getSelectedFile();
    }

    /**
     *  Initialize the applet
     */
    public void init() {

        oval.setBottomColor( darkBlue );
        oval.setTopColor( darkBlue );
        oval.setHeight( 10 );
        oval.setWidth( 10 );

        // initialize the current IMR
        initIMRGui();

        try {
            jbInit();
        }
        catch ( Exception e ) {
            e.printStackTrace();
        }
    }

    /**
     *  THis must be called before the IMR is used. This is what initializes the
     *  IMR
     */
    protected void initIMRGui() {

        // starting
        String S = C + ": initIMRGui(): ";
        if ( this.imrNames.size() < 1 )
            throw new RuntimeException( S + "No IMRs specified, unable to continue" );

        boolean first = true;
        String firstImr = "";
        Iterator it = this.imrNames.keySet().iterator();
        while ( it.hasNext() )

            if ( first ) {
                first = false;
                String val = it.next().toString();
                imrComboBox.addItem( val );
                imrComboBox.setSelectedItem( val );
                firstImr = val;
            }
            else
                imrComboBox.addItem( it.next().toString() );


        // This one line calls alot of code, including reflection,
        // init all coefficients, imr, and editors
        // imrs.setImr(firstImr, this);

    }


    /**
     *  Component initialization
     *
     * @exception  Exception  Description of the Exception
     */
    protected void jbInit() throws Exception {

        String S = C + ": jbInit(): ";


        this.setFont( new java.awt.Font( "Dialog", 0, 10 ) );
        this.getContentPane().setBackground( background );
        this.setSize(new Dimension(842, 513) );
        this.getContentPane().setLayout( GBL );

        outerPanel.setBackground( background );
        outerPanel.setLayout( GBL );

        mainPanel.setBackground( background );
        mainPanel.setBorder( oval );
        // mainPanel.setBorder(BorderFactory.createLineBorder( darkBlue ) );
        mainPanel.setLayout( GBL );

        titlePanel.setBackground( background );
        titlePanel.setBorder( bottomBorder );
        titlePanel.setLayout( GBL );

        titleLabel.setHorizontalAlignment( SwingConstants.CENTER );
        //titleLabel.setText(this.getAppletInfo());
        titleLabel.setFont( new java.awt.Font( "Dialog", 1, 16 ) );

        plotPanel.setBackground( background );
        // plotPanel.setBorder(oval);
        plotPanel.setLayout( GBL );

        innerPlotPanel.setBackground( background );
        innerPlotPanel.setLayout( GBL );
        innerPlotPanel.setBorder( null );

        controlPanel.setLayout( GBL );
        controlPanel.setBackground( background );
        controlPanel.setBorder(BorderFactory.createEtchedBorder(1));

        outerControlPanel.setLayout( GBL );
        outerControlPanel.setBackground( background );


        clearButton.setBackground( lightBlue );
        clearButton.setForeground( darkBlue );
        clearButton.setFont( BUTTON_FONT );
        clearButton.setBorder( BorderFactory.createRaisedBevelBorder() );
        clearButton.setFocusPainted( false );
        clearButton.setText( "Clear Plot" );

        clearButton.addFocusListener(
            new java.awt.event.FocusListener() {
                public void focusGained(FocusEvent e){
                    clearButtonFocusGained();
                }
                public void focusLost(FocusEvent e){ }
            }
        );

        clearButton.addMouseListener(
            new java.awt.event.MouseAdapter() {
                public void mouseClicked( MouseEvent e ) {
                    clearButton_mouseClicked( e );
                }
            } );
        clearButton.setPreferredSize( BUTTON_DIM );
        clearButton.setMinimumSize( BUTTON_DIM );

        addButton.setBackground( lightBlue );
        addButton.setForeground( darkBlue );
        addButton.setFont( BUTTON_FONT );
        addButton.setBorder( BorderFactory.createRaisedBevelBorder() );
        addButton.setFocusPainted( false );
        addButton.setText( "Add Trace" );


        addButton.addFocusListener(
            new java.awt.event.FocusListener() {
                public void focusGained(FocusEvent e){
                    addButtonFocusGained();
                }
                public void focusLost(FocusEvent e){ }
            }
        );


        addButton.addMouseListener(
            new java.awt.event.MouseAdapter() {
                public void mouseClicked( MouseEvent e ) {
                   // System.out.println(C + ": addButton(): Mouse Clicked: ");
                    addButton_mouseClicked( e );
                }
            } );



        addButton.setPreferredSize( BUTTON_DIM );
        addButton.setMinimumSize( BUTTON_DIM );

        toggleButton.setBackground( lightBlue );
        toggleButton.setForeground( darkBlue );
        toggleButton.setFont( BUTTON_FONT );
        toggleButton.setBorder( BorderFactory.createRaisedBevelBorder() );
        toggleButton.setFocusPainted( false );
        toggleButton.setText( "Show Data" );

        toggleButton.addFocusListener(
            new java.awt.event.FocusListener() {
                public void focusGained(FocusEvent e){
                    toggleButtonFocusGained();
                }
                public void focusLost(FocusEvent e){ }
            }
        );

        toggleButton.addMouseListener(
            new java.awt.event.MouseAdapter() {
                public void mouseClicked( MouseEvent e ) {
                    toggleButton_mouseClicked( e );
                }
            } );
        toggleButton.setPreferredSize( BUTTON_DIM );
        toggleButton.setMinimumSize( BUTTON_DIM );
        //toggleButton.setVisible(false);


        buttonPanel.setBackground( background );
        buttonPanel.setBorder( topBorder );
        buttonPanel.setLayout( GBL );

        parametersPanel.setLayout( GBL );
        parametersPanel.setBackground( background );
        //parametersPanel.setBorder(BorderFactory.createEtchedBorder());

        //inputPanel.setBorder(oval);
        inputPanel.setLayout( GBL );
        inputPanel.setBackground( background );

        //sheetPanel.setBorder(BorderFactory.createEtchedBorder());
        sheetPanel.setLayout( GBL );
        sheetPanel.setBackground( background );

        //parametersSplitPane.setBorder(oval);
        parametersSplitPane.setOrientation(JSplitPane.VERTICAL_SPLIT);
        parametersSplitPane.setBorder( null );
        parametersSplitPane.setDividerSize( 5 );

        mainSplitPane.setOrientation( JSplitPane.HORIZONTAL_SPLIT );
        mainSplitPane.setBorder( null );
        mainSplitPane.setDividerSize( 5 );

        pointsTextArea.setBorder( BorderFactory.createEtchedBorder() );
        pointsTextArea.setText( NO_PLOT_MSG );


        dataScrollPane.setBorder( BorderFactory.createEtchedBorder() );

        titleLabel.setForeground( darkBlue );

        imrLabel.setForeground( darkBlue );
        imrLabel.setText( "Choose IMR: " );

        imrComboBox.setBackground( lightBlue );
        imrComboBox.setForeground( darkBlue );
        imrComboBox.setFont( new java.awt.Font( "Dialog", 0, 11 ) );
        imrComboBox.setBorder( null );
        imrComboBox.setPreferredSize( COMBO_DIM );

        imrComboBox.addItemListener( this );
        imrComboBox.setMinimumSize( COMBO_DIM );



        jCheckxlog.setBackground(Color.white);
        jCheckxlog.setFont(new java.awt.Font("Dialog", 1, 11));
        jCheckxlog.setForeground(new Color(80, 80, 133));
        jCheckxlog.setText("X-Log");
        jCheckxlog.addItemListener( this );

        jCheckylog.setBackground(Color.white);
        jCheckylog.setFont(new java.awt.Font("Dialog", 1, 11));
        jCheckylog.setForeground(new Color(80, 80, 133));
        jCheckylog.setText("Y-Log");
        jCheckylog.addItemListener( this );


        plotColorCheckBox.setBackground(Color.white);
        plotColorCheckBox.setFont(new java.awt.Font("Dialog", 1, 11));
        plotColorCheckBox.setForeground(new Color(80, 80, 133));
        plotColorCheckBox.setText("Black Background");
        plotColorCheckBox.addItemListener( this );
        rangeComboBox.addItem(new String(AUTO_SCALE));
        rangeComboBox.addItem(new String(CUSTOM_SCALE));
        rangeComboBox.setBackground(new Color(200, 200, 230));
    rangeComboBox.setForeground(new Color(80, 80, 133));
    rangeComboBox.setMaximumSize(new Dimension(115, 19));
        rangeComboBox.setMinimumSize(new Dimension(115, 19));
        rangeComboBox.setPreferredSize(new Dimension(115, 19));
        rangeComboBox.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(ActionEvent e) {
          rangeComboBox_actionPerformed(e);
        }
        });
    jAxisScale.setForeground(new Color(80, 80, 133));
    jAxisScale.setText("Set Axis Scale: ");
    this.getContentPane().add( outerPanel, new GridBagConstraints( 0, 0, 1, 1, 1.0, 1.0
                , GridBagConstraints.CENTER, GridBagConstraints.BOTH, emptyInsets, 0, 0 ) );

        outerPanel.add( mainPanel, new GridBagConstraints( 0, 0, 1, 1, 1.0, 1.0
                , GridBagConstraints.CENTER, GridBagConstraints.BOTH, new Insets( 5, 5, 5, 5 ), 0, 0 ) );

        titlePanel.add( titleLabel, new GridBagConstraints( 0, 0, 1, 1, 1.0, 0.0
                , GridBagConstraints.CENTER, GridBagConstraints.HORIZONTAL, emptyInsets, 0, 0 ) );

        mainPanel.add( mainSplitPane, new GridBagConstraints( 0, 1, 1, 1, 1.0, 1.0
                , GridBagConstraints.CENTER, GridBagConstraints.BOTH, new Insets( 2, 4, 4, 4 ), 0, 0 ) );

        mainPanel.add( buttonPanel, new GridBagConstraints( 0, 2, GridBagConstraints.REMAINDER, GridBagConstraints.REMAINDER, 1.0, 0.0
                , GridBagConstraints.CENTER, GridBagConstraints.HORIZONTAL, new Insets( 1, 1, 1, 1 ), 0, 0 ) );


        controlPanel.add( parametersPanel, new GridBagConstraints( 0, 0, 1, 1, 1.0, 1.0
                , GridBagConstraints.CENTER, GridBagConstraints.BOTH, emptyInsets, 0, 0 ) );

        outerControlPanel.add( controlPanel, new GridBagConstraints( 0, 0, 1, 1, 1.0, 1.0
                , GridBagConstraints.CENTER, GridBagConstraints.BOTH, new Insets( 0, 5, 0, 0 ), 0, 0 ) );

        parametersPanel.add( parametersSplitPane, new GridBagConstraints( 0, 0, 1, 1, 1.0, 1.0
                , GridBagConstraints.CENTER, GridBagConstraints.BOTH, emptyInsets, 0, 0 ) );

        plotPanel.add( titlePanel, new GridBagConstraints( 0, 0, 1, 1, 1.0, 0.0
                , GridBagConstraints.CENTER, GridBagConstraints.HORIZONTAL, new Insets( 4, 4, 2, 4 ), 0, 0 ) );

        plotPanel.add( innerPlotPanel, new GridBagConstraints( 0, 1, 1, 1, 1.0, 1.0
                , GridBagConstraints.CENTER, GridBagConstraints.BOTH, defaultInsets, 0, 0 ) );

        dataScrollPane.getViewport().add( pointsTextArea, null );

        buttonPanel.add( addButton,  new GridBagConstraints(2, 0, 1, 1, 0.0, 0.0
            ,GridBagConstraints.CENTER, GridBagConstraints.NONE, new Insets(5, 3, 0, 3), 0, 0) );
        buttonPanel.add( clearButton,  new GridBagConstraints(3, 0, 1, 1, 0.0, 0.0
            ,GridBagConstraints.CENTER, GridBagConstraints.NONE, new Insets(5, 3, 0, 3), 0, 0) );
        buttonPanel.add( toggleButton,  new GridBagConstraints(4, 0, 1, 1, 0.0, 0.0
            ,GridBagConstraints.CENTER, GridBagConstraints.NONE, new Insets(5, 3, 0, 1), 0, 0) );
        buttonPanel.add( imrComboBox,  new GridBagConstraints(1, 0, 1, 1, 0.0, 0.0
            ,GridBagConstraints.CENTER, GridBagConstraints.NONE, new Insets(7, 1, 0, 15), 0, 0) );
        buttonPanel.add( imrLabel,  new GridBagConstraints(0, 0, 1, 1, 0.0, 0.0
            ,GridBagConstraints.CENTER, GridBagConstraints.NONE, new Insets(5, 0, 0, 0), 0, 0) );

        buttonPanel.add(jCheckylog,           new GridBagConstraints(5, 0, 1, 1, 0.0, 0.0
            ,GridBagConstraints.CENTER, GridBagConstraints.NONE, new Insets(5, 5, 0, 0), 0, 0));
        buttonPanel.add(jCheckxlog,    new GridBagConstraints(6, 0, 1, 1, 0.0, 0.0
            ,GridBagConstraints.CENTER, GridBagConstraints.NONE, new Insets(5, 5, 0, 0), 0, 0));

        buttonPanel.add(plotColorCheckBox,      new GridBagConstraints(7, 0, 1, 1, 0.0, 0.0
            ,GridBagConstraints.CENTER, GridBagConstraints.NONE, new Insets(0, 5, 0, 0), 0, 0));
    buttonPanel.add(rangeComboBox,            new GridBagConstraints(7, 1, 1, 1, 0.0, 0.0
            ,GridBagConstraints.CENTER, GridBagConstraints.NONE, new Insets(0, 5, 0, 0), 0, 0));
    buttonPanel.add(jAxisScale,         new GridBagConstraints(5, 1, 2, 1, 0.0, 0.0
            ,GridBagConstraints.EAST, GridBagConstraints.NONE, new Insets(0, 0, 0, 0), 0, 0));


        parametersSplitPane.setBottomComponent( sheetPanel );
        parametersSplitPane.setTopComponent( inputPanel );
        // parametersSplitPane.setDividerLocation( 360 );
        parametersSplitPane.setDividerLocation(180 );

        parametersSplitPane.setOneTouchExpandable( false );

        mainSplitPane.setBottomComponent( outerControlPanel );
        mainSplitPane.setTopComponent( plotPanel );

        //mainSplitPane.setDividerLocation( 430 );
        mainSplitPane.setDividerLocation(580 );
        mainSplitPane.setOneTouchExpandable( false );

        //setting the  properties of the legend scrollPane
        legendScrollPane.setBorder(BorderFactory.createEtchedBorder());
        legendPane.setBorder(BorderFactory.createEtchedBorder());
        legendScrollPane.getViewport().add(this.legendPane,null);

        // Big function here, sets all the IMR stuff and puts in sheetsPanel and
        // inputsPanel
        updateChoosenIMR();

    }

    /**
     *  Start the applet
     */
    public void start() { }

    /**
     *  Stop the applet
     */
    public void stop() { }

    /**
     *  Destroy the applet
     */
    public void destroy() { }

    /**
     *  Main method
     *
     * @param  args  The command line arguments
     */
    public static void main( String[] args ) {

        IMRTesterApplet applet = new IMRTesterApplet();

        Color c = new Color( .9f, .9f, 1.0f, 1f );
        Font f = new Font( "Dialog", Font.PLAIN, 11 );

        UIManager.put( "ScrollBar.width", new Integer( 12 ) );
        UIManager.put( "ScrollPane.width", new Integer( 12 ) );

        UIManager.put( "PopupMenu.font", f );
        UIManager.put( "Menu.font", f );
        UIManager.put( "MenuItem.font", f );

        UIManager.put( "ScrollBar.border", BorderFactory.createEtchedBorder( 1 ) );

        UIManager.put( "PopupMenu.background", c );

        //UIManager.put("PopupMenu.selectionBackground", c );
        //UIManager.put("PopupMenu.border", BorderFactory.createLineBorder(Color.red, 1 ) );

        UIManager.put( "Menu.background", c );
        //UIManager.put("Menu.selectionBackground", c );

        UIManager.put( "MenuItem.background", c );
        UIManager.put( "MenuItem.disabledBackground", c );
        //UIManager.put("MenuItem.selectionBackground", c );

        // UIManager.put("MenuItem.borderPainted", new Boolean(false) );
        UIManager.put( "MenuItem.margin", new Insets( 0, 0, 0, 0 ) );

        UIManager.put( "ComboBox.background", c );
        //UIManager.put("ComboBox.selectionBackground", new Color(220, 230, 170));


        applet.isStandalone = true;
        JFrame frame = new JFrame();
        //EXIT_ON_CLOSE == 3
        frame.setDefaultCloseOperation( 3 );

        frame.getContentPane().add( applet, BorderLayout.CENTER );

        applet.init();
        applet.start();
        applet.setFrame( frame );

        frame.setTitle( applet.getAppletInfo() + ":  [" + applet.getCurrentIMRName() + ']' );

        frame.setSize( W, H );
        Dimension d = Toolkit.getDefaultToolkit().getScreenSize();
        frame.setLocation( ( d.width - frame.getSize().width ) / 2, ( d.height - frame.getSize().height ) / 2 );
        frame.setVisible( true );
    }



    /**
     *  Used for synch applet with new IMR choosen. Updates lables and
     *  initializes the IMR if needed.
     */
    protected void updateChoosenIMR() {

        // Starting
        String S = C + ": updateChoosenIMR(): ";

        String choice = imrComboBox.getSelectedItem().toString();

        if ( choice.equals( currentIMRName ) )
            return;
        else
            currentIMRName = choice;

        if ( D )
            System.out.println( S + "Starting: New IMR = " + choice );

        // Clear the current traces
        clearPlot( true );

        if ( titleLabel != null ) {
            titleLabel.setText( currentIMRName );
            titleLabel.validate();
            titleLabel.repaint();
        }

        if ( frame != null )
            frame.setTitle( this.getAppletInfo() + ": " + currentIMRName );

        imr = imrs.setImr( currentIMRName, this );

        sheetPanel.removeAll();
        sheetPanel.add( imr.getIndependentsEditor(),
                new GridBagConstraints( 0, 0, 1, 1, 1.0, 1.0
                , GridBagConstraints.CENTER, GridBagConstraints.BOTH, defaultInsets, 0, 0 )
                 );

        inputPanel.removeAll();
        ParameterListEditor controlsEditor = imr.getControlsEditor();

        if ( D )
            System.out.println( S + "Controls = " + controlsEditor.getParameterList().toString() );

        inputPanel.add( controlsEditor,
                new GridBagConstraints( 0, 0, 1, 1, 1.0, 1.0
                , GridBagConstraints.CENTER, GridBagConstraints.BOTH, defaultInsets, 0, 0 )
                 );

        validate();
        repaint();

        // Ending
        if ( D )
            System.out.println( S + "Ending" );

    }



    /**
     *  This causes the model data to be calculated and a plot trace added to
     *  the current plot
     *
     * @param  e  The feature to be added to the Button_mouseClicked attribute
     */
    void addButton_mouseClicked( MouseEvent e ) {
        addButton( );
    }


    /**
     *  Adds a feature to the GraphPanel attribute of the IMRTesterApplet object
     */
    protected void addGraphPanel() {

        // Starting
        String S = C + ": addGraphPanel(): ";
        if ( D ) System.out.println( S + "Starting: Last xy axis name = " + lastXYAxisName );
         // ImageIcon icon  = new ImageIcon(this.imagePath + File.separator + "z_splash.jpg");
        // Image image = icon.getImage();

        xLog=this.jCheckxlog.isSelected();
        yLog=this.jCheckylog.isSelected();

        String newXYAxisName = functions.getXYAxesName();
        boolean newPlot = ( !newXYAxisName.equals( lastXYAxisName ) );
        if ( newPlot ) lastXYAxisName = newXYAxisName;
        if ( D ) System.out.println( S + "New Plot? " + newPlot );

        // create a default chart based on some sample data...

        // Determine which IM to add to the axis labeling
        String xAxisLabel = functions.getXAxisName();
        String yAxisLabel = imr.getGraphIMYAxisLabel();
        String title = this.getCurrentIMRName();



        if (xLog) xAxis = new com.jrefinery.chart.HorizontalLogarithmicAxis( xAxisLabel );
        else xAxis = new SHAHorizontalNumberAxis( xAxisLabel );

        xAxis.setAutoRangeIncludesZero( false );
        xAxis.setCrosshairLockedOnData( false );
        xAxis.setCrosshairVisible(false);



        if (yLog) yAxis = new com.jrefinery.chart.VerticalLogarithmicAxis(yAxisLabel);
        else yAxis = new SHAVerticalNumberAxis( yAxisLabel );

        yAxis.setAutoRangeMinimumSize(new Integer(0));
        yAxis.setAutoRangeIncludesZero( false );
        yAxis.setCrosshairLockedOnData( false );
        yAxis.setCrosshairVisible( false);


        int type = com.jrefinery.chart.StandardXYItemRenderer.LINES;


        LogXYItemRenderer renderer = new LogXYItemRenderer( type, new StandardXYToolTipGenerator() );
        //StandardXYItemRenderer renderer = new StandardXYItemRenderer( type, new StandardXYToolTipGenerator() );

        /* to set the range of the axis on the input from the user if the range combo box is selected*/
        if(this.customAxis) {
          xAxis.setRange(this.minXValue,this.maxXValue);
          yAxis.setRange(this.minYValue,this.maxYValue);
        }

        // build the plot

        org.scec.gui.PSHALogXYPlot plot = new org.scec.gui.PSHALogXYPlot(this,data, xAxis, yAxis, xLog, yLog);



        plot.setBackgroundAlpha( .8f );
        if( isWhite ) plot.setBackgroundPaint( Color.white );
        else plot.setBackgroundPaint( Color.black );


        plot.setXYItemRenderer( renderer );


        JFreeChart chart = new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT, plot,false);
        chart.setBackgroundPaint( lightBlue );

        // set the font of legend
        int numOfColors = plot.getSeriesCount();
        legendPane.removeAll();
        legendPane.setEditable(false);
        setLegend =new SimpleAttributeSet();
        setLegend.addAttribute(StyleConstants.CharacterConstants.Bold,
                               Boolean.TRUE);
        Document doc = legendPane.getStyledDocument();
        try {

          doc.remove(0,doc.getLength());
          for(int i=0,j=0;i<numOfColors;++i,++j){
            if(j==legendColor.length)
              j=0;
            legend = new String(i+1+"."+this.functions.get(i).getName()+"::"+this.functions.get(i).getInfo()+"\n\n");
            setLegend =new SimpleAttributeSet();
            StyleConstants.setFontSize(setLegend,12);
            StyleConstants.setForeground(setLegend,legendColor[j]);

              doc.insertString(doc.getLength(),legend,setLegend);
         }
       } catch (BadLocationException e) {
                return;
        }

        /*StandardLegend legend = (StandardLegend)chart.getLegend();
        legend.setItemFont(LEGEND_FONT);*/

        // Put into a panel
        panel = new ChartPanel(chart, true, true, true, true, false);
        panel.setBorder( BorderFactory.createEtchedBorder( EtchedBorder.LOWERED ) );
        panel.setMouseZoomable(true);
        panel.setGenerateToolTips(true);
        panel.setHorizontalAxisTrace(false);
        panel.setVerticalAxisTrace(false);


        if ( D ) System.out.println( S + "Toggling plot on" );
        graphOn = false;
        togglePlot();
        if ( D ) System.out.println( S + "Done" );
     }


    /**
     *  Clears the plot screen of all traces, then sychs imr to model
     *
     * @param  e  Description of the Parameter
     */
    void clearButton_mouseClicked( MouseEvent e ) {
        clearButton();
    }

    void clearButton(){
        clearPlot( true );
        imr.synchToModel();
    }

    /**
     *  Clears the plot screen of all traces
     */
    void clearPlot(boolean clearFunctions) {

        if ( D )
            System.out.println( "Clearing plot area" );

        int loc = mainSplitPane.getDividerLocation();
        int newLoc = loc;
        titleSize = titlePanel.getHeight() + 6;

        innerPlotPanel.removeAll();
        panel = null;

        pointsTextArea.setText( NO_PLOT_MSG );
        if( clearFunctions) functions.clear();


        if ( !titlePanel.isVisible() ) {
            titlePanel.setVisible( true );
            //newLoc = loc - titleSize;
        }

        if ( titleLabel != null ) {
            titleLabel.setText( currentIMRName );
            titleLabel.validate();
            titleLabel.repaint();
        }


        validate();
        repaint();

        mainSplitPane.setDividerLocation( newLoc );
    }


    /**
     *  Description of the Method
     *
     * @param  e  Description of the Parameter
     */
    protected void toggleButton_mouseClicked( MouseEvent e ) {
        togglePlot();
    }

    /**
     *  Description of the Method
     */
    protected void togglePlot() {

        // Starting
        String S = C + ": togglePlot(): ";

        innerPlotPanel.removeAll();

        int loc = mainSplitPane.getDividerLocation();
        titleSize = titlePanel.getHeight() + 6;

        int newLoc = loc;
        if ( graphOn ) {
            if ( D )
                System.out.println( S + "Showing Data" );
            toggleButton.setText( "Show Plot" );
            graphOn = false;

            if ( !titlePanel.isVisible() ) {
                titlePanel.setVisible( true );
                // newLoc = loc - titleSize;
            }

            // dataScrollPane.setVisible(true);
            // innerPlotPanel.setBorder(oval);
            innerPlotPanel.add( dataScrollPane, new GridBagConstraints( 0, 0, 1, 1, 1.0, 1.0
                    , GridBagConstraints.CENTER, GridBagConstraints.BOTH, plotInsets, 0, 0 ) );

        }
        else {
            if ( D )
                System.out.println( S + "About to show Plot" );
            graphOn = true;
            // dataScrollPane.setVisible(false);
            toggleButton.setText( "Show Data" );
            if ( panel != null ) {
                if ( D )
                    System.out.println( S + "Showing Plot" );


                if ( titlePanel.isVisible() ) {
                    titlePanel.setVisible( false );
                    //newLoc = loc + titleSize;
                }

                // panel added here
                innerPlotPanel.add( panel, new GridBagConstraints( 0, 0, 1, 1, 1.0, 1.0
                        , GridBagConstraints.CENTER, GridBagConstraints.BOTH, new Insets( 0, 0, 0, 0 ), 0, 0 ) );

                //panel for the legend
                  innerPlotPanel.add(legendScrollPane, new GridBagConstraints( 0,1, 1, 1, 1.0, 1.0
                        , GridBagConstraints.CENTER, GridBagConstraints.BOTH, new Insets( 0, 0, 0, 0 ), 0, 0 ) );



            }
            else {
                if ( D )
                    System.out.println( S + "No Plot - So Showing Data" );


                if ( !titlePanel.isVisible() ) {
                    titlePanel.setVisible( true );
                    // newLoc = loc - titleSize;
                }

                // innerPlotPanel.setBorder(oval);
                innerPlotPanel.add( dataScrollPane, new GridBagConstraints( 0, 0, 1, 1, 1.0, 1.0
                        , GridBagConstraints.CENTER, GridBagConstraints.BOTH, plotInsets, 0, 0 ) );


            }

        }

        if ( D ) System.out.println( S + "Calling validate and repaint" );
        mainSplitPane.setDividerLocation( newLoc );
        validate();
        repaint();

        if ( D ) System.out.println( S + "Loc = " + loc + '\t' + "New Loc = " + newLoc );
        if ( D ) System.out.println( S + "Ending" );

    }

    /**
     *  write out data to file. Needs to be enhanced. No checking is done to
     *  make sure it's not a dir, the file is writable if it exists, etc.
     *
     * @param  e  Description of the Parameter
     */
    void pointsTextArea_mouseClicked( MouseEvent e ) {

        // Starting
        String S = C + ": pointsTextArea_mouseClicked(): ";
        if ( D )
            System.out.println( S + "Starting" );

        // right mouse button not clicked
        if ( !( ( e.getModifiers() & InputEvent.BUTTON3_MASK ) != 0 ) )
            return;

        if ( pointsTextArea.getText().equals( NO_PLOT_MSG ) )
            return;

        File f = getFileFromUser();

        if ( D )
            System.out.println( S + "Saving file " + f.getName() );

        try {
            FileWriter fout = new FileWriter( f );
            fout.write( pointsTextArea.getText() );
            fout.flush();
            fout.close();
        }
        catch ( IOException ee ) {
            System.out.println( S + ee.toString() );
        }

        if ( D )
            System.out.println( S + "Ending" );

    }


    /**
     *  Shown when a Constraint error is thrown on a ParameterEditor
     *
     * @param  e  Description of the Parameter
     */
    public void parameterChangeFailed( ParameterChangeFailEvent e ) {

        String S = C + " : parameterChangeWarning(): ";
        if(D) System.out.println(S + "Starting");

        inParameterChangeWarning = true;

        StringBuffer b = new StringBuffer();

        ParameterAPI param = ( ParameterAPI ) e.getSource();


        ParameterConstraintAPI constraint = param.getConstraint();
        String oldValueStr = e.getOldValue().toString();
        String badValueStr = e.getBadValue().toString();
        String name = param.getName();


        b.append( "The value ");
        b.append( badValueStr );
        b.append( " is not permitted for '");
        b.append( name );
        b.append( "'.\n" );
        b.append( "Resetting to ");
        b.append( oldValueStr );
        b.append( ". The constraints are: \n");
        b.append( constraint.toString() );

        JOptionPane.showMessageDialog(
            this, b.toString(),
            "Cannot Change Value", JOptionPane.INFORMATION_MESSAGE
            );

        if(D) System.out.println(S + "Ending");

    }

    /**
     *  Function that must be implemented by all Listeners for
     *  ParameterChangeWarnEvents.
     *
     * @param  event  The Event which triggered this function call
     */
    public void parameterChangeWarning( ParameterChangeWarningEvent e ){

        String S = C + " : parameterChangeWarning(): ";
        if(D) System.out.println(S + "Starting");

        inParameterChangeWarning = true;

        StringBuffer b = new StringBuffer();

        WarningParameterAPI param = e.getWarningParameter();


        try{
            Double min = param.getWarningMin();
            Double max = param.getWarningMax();

            String name = param.getName();

            b.append( "You have exceeded the recommended range\n");
            b.append( name );
            b.append( ": (" );
            b.append( min.toString() );

            b.append( " to " );
            b.append( max.toString() );
            b.append( ")\n" );
            b.append( "Click Yes to accept the new value: " );
            b.append( e.getNewValue().toString() );
        }
        catch( Exception ee){

            String name = param.getName();

            b.append( "You have exceeded the recommended range for: \n");
            b.append( name + '\n' );
            b.append( "Click Yes to accept the new value: " );
            b.append( e.getNewValue().toString() );
            b.append( name );


        }
        if(D) System.out.println(S + b.toString());

        int result = 0;

        if(D) System.out.println(S + "Showing Dialog");

        result = JOptionPane.showConfirmDialog( this, b.toString(),
            "Exceeded Recommended Values", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);

        if(D) System.out.println(S + "You choose " + result);

        switch (result) {
            case JOptionPane.YES_OPTION:
                if(D) System.out.println(S + "You choose yes, changing value to " + e.getNewValue().toString() );
                param.setValueIgnoreWarning( e.getNewValue() );
                break;
            case JOptionPane.NO_OPTION:
                if(D) System.out.println(S + "You choose no, keeping value = " + e.getOldValue().toString() );
                param.setValueIgnoreWarning( e.getOldValue() );
                break;
            default:
                param.setValueIgnoreWarning( e.getOldValue() );
                if(D) System.out.println(S + "Not sure what you choose, not changing value.");
                break;
        }

        if(D) System.out.println(S + "Ending");

    }

    protected void addButtonFocusGained(){

        String S = C + " : addButtonFocusGained(): ";
        if(D) System.out.println(S + "Starting");

        if( inParameterChangeWarning ){
            if(D) System.out.println(S + "in ParameterChangeWarning");
            addButtonCount++;
            if( addButtonCount > 1){

                addButtonCount = 0;
                if(D) System.out.println(S + "calling add button");
                addButton();
                inParameterChangeWarning = false;

            }
        }
        if(D) System.out.println(S + "Ending");

    }

    /**
     *  This causes the model data to be calculated and a plot trace added to
     *  the current plot
     *
     * @param  e  The feature to be added to the Button_mouseClicked attribute
     */
    protected void addButton(){

        String S = C + ": addButton(): ";
        if ( D ) System.out.println( S + "Starting" );
        if ( D ) System.out.println( S + "Controls = " + this.imr.controlsEditor.getParameterList().toString() );

        if( D && functions != null ){
            ListIterator it = functions.listIterator();
            while( it.hasNext() ){

                DiscretizedFuncAPI func = (DiscretizedFuncAPI)it.next();
                if ( D ) System.out.println( S + "Func info = " + func.getInfo() );

            }
        }

        DiscretizedFuncAPI function = imr.getChoosenFunction();
        if ( D ) System.out.println( S + "New Function info = " + function.getInfo() );

        if( D && functions != null ){
            ListIterator it = functions.listIterator();
            while( it.hasNext() ){

                DiscretizedFuncAPI func = (DiscretizedFuncAPI)it.next();
                if ( D ) System.out.println( S + "Func info = " + func.getInfo() );

            }
        }

        data.setXLog(xLog);
        data.setYLog(yLog);

        String xOld = functions.getXAxisName();
        String yOld = functions.getYAxisName();

        String xNew = imr.getGraphXAxisLabel();
        String yNew = imr.getGraphIMYAxisLabel();

        boolean newGraph = false;
        if( !xOld.equals(xNew) ) newGraph = true;
        if( !yOld.equals(yNew) ) newGraph = true;

        if( newGraph ){
            functions.clear();
            functions.setYAxisName( imr.getGraphIMYAxisLabel() );
            functions.setXAxisName( imr.getGraphXAxisLabel() );
        }


        /** @todo may have to be switched when different x/y axis choosen */
        if ( !functions.isFuncAllowed( function ) ) {
            functions.clear();
            //data.prepForXLog();
        }
        if( !functions.contains( function ) ){
            if ( D ) System.out.println( S + "AddjIMRListing new function" );
            functions.add(function);
            //data.prepForXLog();
        }
        else {

            if(D) System.out.println(S + "Showing Dialog");
            if( !this.inParameterChangeWarning ){

                JOptionPane.showMessageDialog(
                    null, "This graph already exists, will not add again.",
                    "Cannot Add", JOptionPane.INFORMATION_MESSAGE
                );
            }


            if ( D ) System.out.println( S + "Function already exists in graph, not adding .." );
            return;
        }

        //if(D) System.out.println(S + "\n\nFunction = " + functions.toString() + "\n\n");

        imr.synchToModel();

        // Add points data to text area, people can see

        pointsTextArea.setText( currentIMRName + ": " + imr.getGraphXYAxisTitle() + '\n' + functions.toString() );
        //if ( D ) System.out.println( S + "Graphing function:" + function.toString() );

        addGraphPanel();

        if ( titleLabel != null ) {
            // titleLabel.setText( currentIMRName + ": " + imr.getGraphXYAxisTitle() );
            titleLabel.setText( currentIMRName );
            titleLabel.validate();
            titleLabel.repaint();
        }

        if ( D ) System.out.println( S + "Ending" );

    }


    protected void clearButtonFocusGained(){

        String S = C + " : clearButtonFocusGained(): ";
        if(D) System.out.println(S + "Starting");

        if( inParameterChangeWarning ){
            if(D) System.out.println(S + "in ParameterChangeWarning");
            clearButtonCount++;
            if( clearButtonCount > 1){

                clearButtonCount = 0;
                if(D) System.out.println(S + "calling clear button");
                clearButton();
                inParameterChangeWarning = false;

            }
        }
        if(D) System.out.println(S + "Ending");

    }


    protected void toggleButtonFocusGained(){

        String S = C + " : toggleButtonFocusGained(): ";
        if(D) System.out.println(S + "Starting");

        if( inParameterChangeWarning ){
            if(D) System.out.println(S + "in ParameterChangeWarning");
            toggleButtonCount++;
            if( toggleButtonCount > 1){

                toggleButtonCount = 0;
                if(D) System.out.println(S + "calling toggle button");
                togglePlot();
                inParameterChangeWarning = false;

            }
        }
        if(D) System.out.println(S + "Ending");

    }



    /**
     *  Description of the Method
     *
     * @param  e  Description of the Parameter
     */
    public void itemStateChanged( ItemEvent e ) {

        // Starting
        String S = C + ": itemStateChanged(): ";
        if ( D ) System.out.println( S + "Starting" );

        if ( e.getSource().equals( imrComboBox ) ){
            this.customAxis =false;
            updateChoosenIMR();
         }

         else if( e.getSource().equals( jCheckxlog ) ){

            String title = imr.getGraphXYAxisTitle();

            clearPlot( false );
            inParameterChangeWarning = false;

            if( jCheckxlog.isSelected() ) xLog = true;
            else xLog = false;

            if( functions != null && data != null) {
                data.setXLog(xLog);
                String funcStr = functions.toString();
                pointsTextArea.setText( currentIMRName + ": " + title + '\n' + funcStr );
                addGraphPanel();

            }

        }
        else if( e.getSource().equals( jCheckylog ) ){

            String title = imr.getGraphXYAxisTitle();

            clearPlot( false );
            inParameterChangeWarning = false;

            if( jCheckylog.isSelected() ) yLog = true;
            else yLog = false;


            if( functions != null && data != null) {
                data.setYLog(yLog);
                pointsTextArea.setText( currentIMRName + ": " + title + '\n' + functions.toString() );
                addGraphPanel();
            }
        }

        else if( e.getSource().equals( plotColorCheckBox ) ){

            if( isWhite ) {
                isWhite = false;
                if( panel != null )
                    panel.getChart().getPlot().setBackgroundPaint(Color.black);

            }
            else{
                isWhite = true;
                if( panel != null )
                    panel.getChart().getPlot().setBackgroundPaint(Color.white);
            }
        }

        // Ending
        if ( D ) System.out.println( S + "Ending" );

    }



 /**
  * whenever selection is made in the combo box
  * @param e
  */
  void rangeComboBox_actionPerformed(ActionEvent e) {

    String str=(String)rangeComboBox.getSelectedItem();
    if(str.equalsIgnoreCase(AUTO_SCALE)){
      customAxis=false;
      addGraphPanel();
    }
    if(str.equalsIgnoreCase(CUSTOM_SCALE))  {
       Range rX = xAxis.getRange();
       Range rY= yAxis.getRange();
       double minX=rX.getLowerBound();
       double maxX=rX.getUpperBound();
       double minY=rY.getLowerBound();
       double maxY=rY.getUpperBound();


       int xCenter=getAppletXAxisCenterCoor();
       int yCenter=getAppletYAxisCenterCoor();
       IMRAxisScale axisScale=new IMRAxisScale(this,minX,maxX,minY,maxY);
       axisScale.setBounds(xCenter-60,yCenter-50,375,148);
       axisScale.pack();
       axisScale.show();
    }
  }

  /**
   * sets the range for X-axis
   * @param xMin : minimum value for X-axis
   * @param xMax : maximum value for X-axis
   */
  public void setXRange(double xMin,double xMax) {
     minXValue=xMin;
     maxXValue=xMax;
     this.customAxis=true;

  }

  /**
   * sets the range for Y-axis
   * @param yMin : minimum value for Y-axis
   * @param yMax : maximum value for Y-axis
   */
  public void setYRange(double yMin,double yMax) {
     minYValue=yMin;
     maxYValue=yMax;
     this.customAxis=true;
     addGraphPanel();
  }

  /**
   * This function handles the Zero values in the X and Y data set when exception is thrown,
   * it reverts back to the linear scale displaying a message box to the user.
   */
  public void invalidLogPlot(String message) {

     int xCenter=getAppletXAxisCenterCoor();
     int yCenter=getAppletYAxisCenterCoor();
     if(message.equals("Log Value of the negative values and 0 does not exist for X-Log Plot")) {
       this.jCheckxlog.setSelected(false);
       ShowMessage showMessage=new ShowMessage("      X-Log Plot Error as it contains Zero Values");
       showMessage.setBounds(xCenter-60,yCenter-50,370,145);
       showMessage.pack();
       showMessage.show();
     }
     if(message.equals("Log Value of the negative values and 0 does not exist for Y-Log Plot")) {
       this.jCheckylog.setSelected(false);
       ShowMessage showMessage=new ShowMessage("      Y-Log Plot Error as it contains Zero Values");
       showMessage.setBounds(xCenter-60,yCenter-50,375,148);
       showMessage.pack();
       showMessage.show();
     }
  }

  /**
   * gets the Applets X-axis center coordinates
   * @return
   */
  private int getAppletXAxisCenterCoor() {
    return (this.getX()+this.getWidth())/2;
  }

  /**
   * gets the Applets Y-axis center coordinates
   * @return
   */
  private int getAppletYAxisCenterCoor() {
    return (this.getY() + this.getHeight())/2;
  }

}

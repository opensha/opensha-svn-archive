package javaDevelopers.vipin.dao.db;

import javaDevelopers.vipin.dao.EstimateInstancesDAO_API;
import javaDevelopers.vipin.dao.*;
import javaDevelopers.vipin.vo.EstimateInstances;
import javaDevelopers.vipin.dao.exception.*;
import java.util.ArrayList;
import org.opensha.data.estimate.*;
import java.sql.SQLException;
import java.sql.ResultSet;
import javaDevelopers.vipin.dao.EstimateDAO_API;
import org.opensha.util.ClassUtils;

/**
 * <p>Title: EstimateInstancesDB_DAO.java </p>
 * <p>Description: </p>
 * <p>Copyright: Copyright (c) 2002</p>
 * <p>Company: </p>
 * @author not attributable
 * @version 1.0
 */

public class EstimateInstancesDB_DAO implements EstimateInstancesDAO_API {
  private final static String TABLE_NAME="Est_Instances";
  private final static String EST_ID="Est_Id";
  private final static String EST_TYPE_ID="Est_Type_Id";
  private final static String UNITS="Est_Units";
  private final static String COMMENTS="Comments";
  private final static String ESTIMATES_DB_DAO_PACKAGE="javaDevelopers.vipin.dao.db.";
  private final static String ESTIMATES_DB_DAO_SUFFIX = "DB_DAO";
  private DB_Connection dbConnection;

  /**
   * Constructor.
   * @param dbConnection
   */
  public EstimateInstancesDB_DAO(DB_Connection dbConnection) {
   setDB_Connection(dbConnection);
  }


  public void setDB_Connection(DB_Connection connection) {
    this.dbConnection = connection;
  }

  /**
   * Add estimate instance to the table
   * @param estimateInstance
   * @throws InsertException
   */
  public void addEstimateInstance(EstimateInstances estimateInstance) throws InsertException {
    Estimate estimate = estimateInstance.getEstimate();
    EstimateDAO_API estimateDAO = getEstimateDAO(estimate);
    EstimateTypeDB_DAO estimateTypeDB_DAO = new EstimateTypeDB_DAO(dbConnection);
    int estimateTypeId = estimateTypeDB_DAO.getEstimateType(estimateDAO.getEstimateTypeName()).getEstimateTypeId();
    String sql = "insert into "+TABLE_NAME+"("+EST_TYPE_ID+","+UNITS+","+COMMENTS+")"+
        " values("+estimateTypeId+","+estimateInstance.getUnits()+","+
        estimate.getComments()+")";
    try {
      ResultSet result = dbConnection.insertForAutoGeneratedKeys(sql);
      while(result.next()) estimateDAO.addEstimate(result.getInt(EST_ID),
                                          estimate);
    }catch(SQLException e) {
      throw new InsertException(e.getMessage());
    }
  }

  // get the correct DAO according to estimate type
  private EstimateDAO_API getEstimateDAO(Estimate estimate) {
    EstimateDAO_API estimateDAO_API = null;
    if(estimate instanceof NormalEstimate) estimateDAO_API = new NormalEstimateDB_DAO(dbConnection);
 //  if(estimate instanceof LogNormalEstimate) estimateTypeName = NormalEstimateDB_DAO.EST_TYPE_NAME;
 //  if(estimate instanceof FractileListEstimate) estimateTypeName = NormalEstimateDB_DAO.EST_TYPE_NAME;
 //  if(estimate instanceof PDF_Estimate) estimateTypeName = NormalEstimateDB_DAO.EST_TYPE_NAME;
 //  if(estimate instanceof IntegerEstimate) estimateTypeName = NormalEstimateDB_DAO.EST_TYPE_NAME;
 //  if(estimate instanceof DiscreteValueEstimate) estimateTypeName = NormalEstimateDB_DAO.EST_TYPE_NAME;
    return estimateDAO_API;

  }


  public EstimateInstances getEstimateInstance(int estimateInstanceId) throws QueryException {
    EstimateInstances estimateInstance=null;
    String condition  =  " where "+EST_ID+"="+estimateInstanceId;
    ArrayList estimateList = query(condition);
    if(estimateList.size()>0) estimateInstance = (EstimateInstances)estimateList.get(0);
    return estimateInstance;

  }

  /**
   * remove the estimate instance from the table
   * @param estimateInstanceId
   * @return
   * @throws UpdateException
   */
  public boolean removeEstimateInstance(int estimateInstanceId) throws UpdateException {
    String sql = "select "+EST_ID+","+EST_TYPE_ID+","+UNITS+","+COMMENTS+" from "+
        TABLE_NAME+" where "+EST_ID+"="+estimateInstanceId;
    try {
      ResultSet rs  = dbConnection.queryData(sql);
      EstimateTypeDB_DAO estimateTypeDB_DAO = new EstimateTypeDB_DAO(dbConnection);
      while(rs.next())  {
        String estimateTypeName = estimateTypeDB_DAO.getEstimateType(rs.getInt(EST_TYPE_ID)).getEstimateName();
        // delete from specific table for each estimate
        EstimateDAO_API estimateDAO_API = getEstimateDAO_API(estimateTypeName);
        estimateDAO_API.removeEstimate(estimateInstanceId);
        //remove from master table of estimates
        String delSql = "delete from "+TABLE_NAME+" where "+EST_ID+"="+estimateInstanceId;
        int numRows = dbConnection.insertUpdateOrDeleteData(delSql);
        if(numRows<0) return false;
      }
      rs.close();
      rs.getStatement().close();
    } catch(SQLException e) { throw new QueryException(e.getMessage()); }
    return true;
  }



  private EstimateDAO_API getEstimateDAO_API(String estimateTypeName) {
    return (EstimateDAO_API)ClassUtils.createNoArgConstructorClassInstance(ESTIMATES_DB_DAO_PACKAGE+estimateTypeName+ESTIMATES_DB_DAO_SUFFIX);
  }


  private ArrayList query(String condition) throws QueryException {
  ArrayList estimateInstancesList = new ArrayList();
  String sql = "select "+EST_ID+","+EST_TYPE_ID+","+UNITS+","+COMMENTS+" from "+
      TABLE_NAME+" "+condition;
  try {
    ResultSet rs  = dbConnection.queryData(sql);
    EstimateTypeDB_DAO estimateTypeDB_DAO = new EstimateTypeDB_DAO(dbConnection);
    while(rs.next())  {
      EstimateInstances estimateInstances = new EstimateInstances();
      estimateInstances.setUnits(rs.getString(UNITS));
      estimateInstances.setEstimateInstanceId(rs.getInt(EST_ID));
      String estimateTypeName = estimateTypeDB_DAO.getEstimateType(rs.getInt(EST_TYPE_ID)).getEstimateName();
      EstimateDAO_API estimateDAO_API = getEstimateDAO_API(estimateTypeName);
      Estimate estimate = estimateDAO_API.getEstimate(rs.getInt(EST_ID));
      estimate.setComments(rs.getString(COMMENTS));
      estimateInstances.setEstimate(estimate);
      estimateInstancesList.add(estimateInstances);
    }
    rs.close();
    rs.getStatement().close();
  } catch(SQLException e) { throw new QueryException(e.getMessage()); }
  return estimateInstancesList;
}

}
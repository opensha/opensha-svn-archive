// This class was generated by the JAXRPC SI, do not edit.
// Contents subject to change without notice.
// JAX-RPC Standard Implementation (1.1, build EA-R39)

package unusedArchive.webservices;

import java.lang.reflect.Method;

import javax.xml.namespace.QName;

import com.sun.xml.rpc.encoding.CombinedSerializer;
import com.sun.xml.rpc.encoding.InternalTypeMappingRegistry;
import com.sun.xml.rpc.encoding.SOAPDeserializationContext;
import com.sun.xml.rpc.encoding.SOAPDeserializationState;
import com.sun.xml.rpc.encoding.SOAPFaultInfoSerializer;
import com.sun.xml.rpc.encoding.SerializerConstants;
import com.sun.xml.rpc.encoding.soap.SOAPConstants;
import com.sun.xml.rpc.server.StreamingHandlerState;
import com.sun.xml.rpc.soap.message.InternalSOAPMessage;
import com.sun.xml.rpc.soap.message.SOAPBlockInfo;
import com.sun.xml.rpc.soap.message.SOAPFaultInfo;
import com.sun.xml.rpc.soap.message.SOAPHeaderBlockInfo;
import com.sun.xml.rpc.soap.streaming.SOAPProtocolViolationException;
import com.sun.xml.rpc.streaming.XMLReader;

public class GMT_WebServiceAPI_Tie
    extends com.sun.xml.rpc.server.TieBase implements SerializerConstants {


    public GMT_WebServiceAPI_Tie() throws Exception {
        super(new unusedArchive.webservices.server.GMT_WebService_SerializerRegistry().getRegistry());
        initialize(internalTypeMappingRegistry);
    }

    /*
     * This method does the actual method invocation for operation: runGMT_Script
     */
    private void invoke_runGMT_Script(StreamingHandlerState state) throws Exception {

        unusedArchive.webservices.GMT_WebServiceAPI_runGMT_Script_RequestStruct myGMT_WebServiceAPI_runGMT_Script_RequestStruct = null;
        Object myGMT_WebServiceAPI_runGMT_Script_RequestStructObj =
            state.getRequest().getBody().getValue();

        if (myGMT_WebServiceAPI_runGMT_Script_RequestStructObj instanceof SOAPDeserializationState) {
            myGMT_WebServiceAPI_runGMT_Script_RequestStruct = (unusedArchive.webservices.GMT_WebServiceAPI_runGMT_Script_RequestStruct)((SOAPDeserializationState)myGMT_WebServiceAPI_runGMT_Script_RequestStructObj).getInstance();
        } else {
            myGMT_WebServiceAPI_runGMT_Script_RequestStruct = (unusedArchive.webservices.GMT_WebServiceAPI_runGMT_Script_RequestStruct)myGMT_WebServiceAPI_runGMT_Script_RequestStructObj;
        }

        try {
            java.lang.String result =
                ((unusedArchive.webservices.GMT_WebServiceAPI) getTarget()).runGMT_Script(myGMT_WebServiceAPI_runGMT_Script_RequestStruct.getArrayOfString_1(), myGMT_WebServiceAPI_runGMT_Script_RequestStruct.getArrayOfDataHandler_2());
            unusedArchive.webservices.GMT_WebServiceAPI_runGMT_Script_ResponseStruct myGMT_WebServiceAPI_runGMT_Script_ResponseStruct =
                new unusedArchive.webservices.GMT_WebServiceAPI_runGMT_Script_ResponseStruct();
            SOAPHeaderBlockInfo headerInfo;
            myGMT_WebServiceAPI_runGMT_Script_ResponseStruct.setResult(result);

            SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_runGMT_Script_runGMT_ScriptResponse_QNAME);
            bodyBlock.setValue(myGMT_WebServiceAPI_runGMT_Script_ResponseStruct);
            bodyBlock.setSerializer(ns1_myGMT_WebServiceAPI_runGMT_Script_ResponseStruct_SOAPSerializer);
            state.getResponse().setBody(bodyBlock);
        } catch (javax.xml.rpc.soap.SOAPFaultException e) {
            SOAPFaultInfo fault = new SOAPFaultInfo(e.getFaultCode(),
                e.getFaultString(), e.getFaultActor(), e.getDetail());
            SOAPBlockInfo faultBlock = new SOAPBlockInfo(com.sun.xml.rpc.encoding.soap.SOAPConstants.QNAME_SOAP_FAULT);
            faultBlock.setValue(fault);
            faultBlock.setSerializer(new SOAPFaultInfoSerializer(false, e.getDetail()==null));
            state.getResponse().setBody(faultBlock);
            state.getResponse().setFailure(true);
        }
    }

    /*
     * This method must determine the opcode of the operation that has been invoked.
     */
    protected void peekFirstBodyElement(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingHandlerState state) throws Exception {
        if (bodyReader.getName().equals(ns1_runGMT_Script_runGMT_Script_QNAME)) {
            state.getRequest().setOperationCode(runGMT_Script_OPCODE);
        }
        else {
            throw new SOAPProtocolViolationException("soap.operation.unrecognized", bodyReader.getName().toString());
        }
    }

    /*
     *  this method deserializes the request/response structure in the body
     */
    protected void readFirstBodyElement(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingHandlerState  state) throws Exception {
        int opcode = state.getRequest().getOperationCode();
        switch (opcode) {
            case runGMT_Script_OPCODE:
                deserialize_runGMT_Script(bodyReader, deserializationContext, state);
                break;
            default:
                throw new SOAPProtocolViolationException("soap.operation.unrecognized", Integer.toString(opcode));
        }
    }



    /*
     * This method deserializes the body of the runGMT_Script operation.
     */
    private void deserialize_runGMT_Script(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingHandlerState state) throws Exception {
        Object myGMT_WebServiceAPI_runGMT_Script_RequestStructObj =
            ns1_myGMT_WebServiceAPI_runGMT_Script_RequestStruct_SOAPSerializer.deserialize(ns1_runGMT_Script_runGMT_Script_QNAME,
                bodyReader, deserializationContext);

        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_runGMT_Script_runGMT_Script_QNAME);
        bodyBlock.setValue(myGMT_WebServiceAPI_runGMT_Script_RequestStructObj);
        state.getRequest().setBody(bodyBlock);
    }


    /*
     * This method must invoke the correct method on the servant based on the opcode.
     */
    protected void processingHook(StreamingHandlerState state) throws Exception {
        switch (state.getRequest().getOperationCode()) {
            case runGMT_Script_OPCODE:
                invoke_runGMT_Script(state);
                break;
            default:
                throw new SOAPProtocolViolationException("soap.operation.unrecognized", Integer.toString(state.getRequest().getOperationCode()));
        }
    }


    public String getDefaultEnvelopeEncodingStyle() {
        return null;
    }

    public String getImplicitEnvelopeEncodingStyle() {
        return "";
    }


    /*
     * This method must determine the opcode of the operation given the QName of the first body element.
     */
    public int getOpcodeForFirstBodyElementName(QName name) {
        if (name == null) {
            return InternalSOAPMessage.NO_OPERATION;
        }
        if (name.equals(ns1_runGMT_Script_runGMT_Script_QNAME)) {
            return runGMT_Script_OPCODE;
        }
        return super.getOpcodeForFirstBodyElementName(name);
    }


    private Method internalGetMethodForOpcode(int opcode) throws ClassNotFoundException, NoSuchMethodException {

        Method theMethod = null;

        switch(opcode) {
            case runGMT_Script_OPCODE:
                {
                    Class[] carray = { Class.forName("[Ljava.lang.String;"),Class.forName("[Ljavax.activation.DataHandler;") };
                    theMethod = (unusedArchive.webservices.GMT_WebServiceAPI.class).getMethod("runGMT_Script", carray);
                }
                break;

            default:
        }
        return theMethod;
    }

    private Method[] methodMap = new Method[1];

    /*
     * This method returns the Method Obj for a specified opcode.
     */
    public Method getMethodForOpcode(int opcode) throws ClassNotFoundException, NoSuchMethodException {

        if (opcode <= InternalSOAPMessage.NO_OPERATION ) {
            return null;
        }

        if (opcode >= 1 ) {
            return null;
        }

        if (methodMap[opcode] == null)  {
            methodMap[opcode] = internalGetMethodForOpcode(opcode);
        }

        return methodMap[opcode];
    }

    /*
     * This method returns an array containing (prefix, nsURI) pairs.
     */
    protected String[] getNamespaceDeclarations() {
        return myNamespace_declarations;
    }

    /*
     * This method returns an array containing the names of the headers we understand.
     */
    public QName[] getUnderstoodHeaders() {
        return understoodHeaderNames;
    }

    private void initialize(InternalTypeMappingRegistry registry) throws Exception {
        ns1_myGMT_WebServiceAPI_runGMT_Script_ResponseStruct_SOAPSerializer = (CombinedSerializer)registry.getSerializer(SOAPConstants.NS_SOAP_ENCODING, unusedArchive.webservices.GMT_WebServiceAPI_runGMT_Script_ResponseStruct.class, ns1_runGMT_ScriptResponse_TYPE_QNAME);
        ns1_myGMT_WebServiceAPI_runGMT_Script_RequestStruct_SOAPSerializer = (CombinedSerializer)registry.getSerializer(SOAPConstants.NS_SOAP_ENCODING, unusedArchive.webservices.GMT_WebServiceAPI_runGMT_Script_RequestStruct.class, ns1_runGMT_Script_TYPE_QNAME);
    }

    private static final QName portName = new QName("http://gravity.usc.edu/gmt/ws/GMT_WS", "GMT_WebServiceAPI");
    private static final int runGMT_Script_OPCODE = 0;
    private static final QName ns1_runGMT_Script_runGMT_Script_QNAME = new QName("http://gravity.usc.edu/gmt/ws/GMT_WS", "runGMT_Script");
    private static final QName ns1_runGMT_Script_TYPE_QNAME = new QName("http://gravity.usc.edu/gmt/ws/GMT_WS", "runGMT_Script");
    private CombinedSerializer ns1_myGMT_WebServiceAPI_runGMT_Script_RequestStruct_SOAPSerializer;
    private static final QName ns1_runGMT_Script_runGMT_ScriptResponse_QNAME = new QName("http://gravity.usc.edu/gmt/ws/GMT_WS", "runGMT_ScriptResponse");
    private static final QName ns1_runGMT_ScriptResponse_TYPE_QNAME = new QName("http://gravity.usc.edu/gmt/ws/GMT_WS", "runGMT_ScriptResponse");
    private CombinedSerializer ns1_myGMT_WebServiceAPI_runGMT_Script_ResponseStruct_SOAPSerializer;
    private static final String[] myNamespace_declarations =
                                        new String[] {
                                            "ns0", "http://gravity.usc.edu/gmt/ws/GMT_WS",
                                            "ns1", "http://java.sun.com/jax-rpc-ri/internal"
                                        };

    private static final QName[] understoodHeaderNames = new QName[] {  };
}
